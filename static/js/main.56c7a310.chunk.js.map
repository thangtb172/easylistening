{"version":3,"sources":["Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["Shuffle","audioElement","arr","temp","index","ctr","length","Math","floor","random","App","props","handleKeyPress","event","i","isEnd","state","key","playAudio","currentTime","_startTime","duration","english_text","vietnames_text","final_text","guessWord","checkAnswer","createAnswer","storeIndex","countGuess","bool","english","vietnames","submit","value","voice","valueInput","inputArr","urlDownLoad","urlYouTuBe","captions","starts","durations","count","results","isPlayArr","prevKey","defaultsYoutubeUrl","handleGuessButtons","bind","handleGuessBox","handleOtherButton","handleChange","handleSubmit","showAnswers","handleSelectChange","showButtons","script","document","createElement","src","async","body","appendChild","this","shortUrl","indexOf","split","slice","Promise","resolve","xhr","XMLHttpRequest","url","open","onreadystatechange","readyState","DONE","status","console","log","onload","e","responseText","onerror","undefined","error","send","then","val","result","replace","RegExp","pop","textOfStartDuration","start","push","show","j","forEach","element","setState","str","evt","ltr","target","window","responsiveVoice","speak","err","k","toLowerCase","newAnswer","splice","copy","text","startTime","parseInt","pause","setAttribute","self","addEventListener","map","play","elements","className","onMouseEnter","onClick","type","name","placeholder","onChange","style","borderRadius","height","width","fontSize","ref","onKeyUp","autoPlay","controls","hidden","id","background","border","color","newCheckAnswer","s","trim","Audio","includes","preventDefault","axios","get","deck","string","data","gameStart","generateButtons","onSubmit","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.56c7a310.chunk.js","sourcesContent":["function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nvar audioElement;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      english_text: \"\",\n      vietnames_text: \"\",\n      final_text: [],\n      guessWord: \"\",\n      checkAnswer: [],\n      createAnswer: [],\n      key: 0,\n      index: 0,\n      storeIndex: \"\",\n      countGuess: 0,\n      bool: false,\n      english: \"\",\n      vietnames: \"\",\n      submit: true,\n      value: \"default\",\n      voice: \"US English Male\",\n      valueInput: \"\",\n      inputArr: [],\n      urlDownLoad: \"\",\n      urlYouTuBe: \"\",\n      captions: [],\n      duration: \"\",\n      audioElement: \"\",\n      starts: [],\n      durations: [],\n      count: 0,\n      results: [],\n      isPlayArr: [],\n      prevKey: -1,\n      isEnd: false,\n      defaultsYoutubeUrl: [\n        \"https://www.youtube.com/watch?v\",\n        \"https://youtu.be/\",\n        \"https://m.youtube.com/watch?feature=youtu.be&v=\",\n        \"https://www.youtube.com/watch?feature=youtu.be&v=\",\n      ],\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.showAnswers = this.showAnswers.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.playAudio = this.playAudio.bind(this);\n    this.showButtons = this.showButtons.bind(this);\n  }\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n  showButtons() {\n    if (this.state.captions.length === 0 && this.state.urlYouTuBe.length > 0) {\n      let urlYouTuBe = this.state.urlYouTuBe;\n      let shortUrl = \"\";\n      for (let i = 0; i < this.state.defaultsYoutubeUrl.length; i++) {\n        if (!urlYouTuBe.indexOf(this.state.defaultsYoutubeUrl[i])) {\n          switch (i) {\n            case 0:\n              shortUrl = urlYouTuBe.split(\"=\")[1].split(\"&\")[0];\n              break;\n            case 1:\n              shortUrl = urlYouTuBe.split(\"/\")[3].slice(0, 11);\n              break;\n            case 2:\n              shortUrl = urlYouTuBe.split(\"=\")[2];\n              break;\n            case 3:\n              shortUrl = urlYouTuBe.split(\"&\")[1].split(\"=\")[1];\n            default:\n              break;\n\n\n          }\n        }\n      }\n\n      let captions = [];\n      let starts = [];\n      let durations = [];\n      let response = new Promise((resolve) => {\n        const xhr = new XMLHttpRequest(),\n          method = \"GET\",\n          url = \"https://video.google.com/timedtext?&lang=en&v=\" + shortUrl;\n\n        xhr.open(method, url, true);\n        xhr.onreadystatechange = function () {\n          // In local files, status is 0 upon success in Mozilla Firefox\n          if (xhr.readyState === XMLHttpRequest.DONE) {\n            var status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n              // The request has been completed successfully\n              console.log(\"OK\");\n            } else {\n              // Oh no! There has been an error with the request!\n            }\n          }\n        };\n\n        xhr.onload = function (e) {\n          resolve(xhr.responseText);\n        };\n        xhr.onerror = function () {\n          resolve(undefined);\n          console.error(\"** An error occurred during the XMLHttpRequest\");\n        };\n        xhr.send(null);\n      });\n      response.then((val) => {\n        let string = val\n          .replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n          .split(\"<transcript>\");\n        let result = string[1].split(\"</text>\");\n        result.pop();\n        for (let i = 0; i < result.length; i++) {\n          let arr = result[i].split(\">\");\n          let textOfStartDuration = arr[0].split(\" \");\n          let start = textOfStartDuration[1].split(\"=\")[1];\n          let duration = textOfStartDuration[2].split(\"=\")[1];\n\n          captions.push(\n            arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n          );\n          starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n          durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n        }\n        let length = captions.length;\n        let results = [];\n        if (length % 2 === 0) {\n          for (let i = 0; i < length; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n        } else {\n          for (let i = 0; i < length - 1; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n          results.push(captions[length - 1]);\n        }\n        let createAnswer = [];\n        let inputArr = [];\n        let storeIndex = [];\n        let show = [];\n        let checkAnswer = [];\n        let final_text = [];\n        let isPlayArr = [];\n        for (let i = 0; i < results.length; i++) {\n          let arr = [];\n          checkAnswer.push(results[i].split(\" \"));\n          final_text.push(results[i].split(\" \"));\n          inputArr.push(true);\n          storeIndex.push(0);\n          isPlayArr.push(true);\n          show.push(0);\n          for (let j = 0; j < results[i].split(\" \").length; j++) {\n            arr.push(\"___\");\n          }\n          createAnswer.push(arr);\n        }\n        final_text.forEach((element) => Shuffle(element));\n\n        this.setState({\n          captions: captions,\n          starts: starts,\n          durations: durations,\n          results: results,\n          final_text: final_text,\n          createAnswer: createAnswer,\n          inputArr: inputArr,\n          storeIndex: storeIndex,\n          show: show,\n          checkAnswer: checkAnswer,\n          isPlayArr: isPlayArr,\n        });\n      });\n    }\n  }\n\n  handleGuessBox(key) {\n    // && this.state.guessWord.length > 0\n    // let copy = this.state.isPlayArr.map((bool) => true);\n    if (key !== this.state.key) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n        //   isPlayArr: copy,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, this.state.voice);\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr;\n    try {\n      ltr = evt.target.value;\n    } catch (err) {\n      ltr = evt;\n    }\n\n    console.log(ltr);\n    const key = this.state.key;\n    const storeIndex = this.state.storeIndex;\n    const k = storeIndex[key];\n    let countGuess = this.state.countGuess;\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, this.state.voice);\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      this.state.checkAnswer[key][k].replace(\",\", \"\").toLowerCase() ===\n      ltr.replace(\",\", \"\").toLowerCase()\n    ) {\n      let newAnswer = this.state.createAnswer.slice(\n        0,\n        this.state.createAnswer.length\n      );\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        // window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      final_text[key].splice(\n        final_text[key].indexOf(this.state.checkAnswer[key][k]),\n        1\n      );\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && this.state.bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        //window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      newAnswer[key][k] = this.state.checkAnswer[key][k];\n      let copy = storeIndex.slice(0, storeIndex.length);\n      copy[key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: this.state.checkAnswer[key][k],\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n        valueInput: \"\",\n      }));\n      if (k + 1 === this.state.checkAnswer[key].length) {\n        this.setState((str) => ({\n          index: 0,\n        }));\n      }\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = `The next word is ${this.state.checkAnswer[key][k]}`;\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, this.state.voice);\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n        this.setState((str) => ({\n          valueInput: \"\",\n        }));\n      }\n\n      this.setState((str) => ({\n        guessWord: this.state.checkAnswer[key][k],\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        this.state.voice\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n\n  playAudio(index) {\n    try {\n      let {\n        starts,\n        durations,\n        results,\n        isPlayArr,\n        prevKey,\n        isEnd,\n      } = this.state;\n      let startTime, duration;\n      if (index === results.length - 1) {\n        startTime = starts[index * 2];\n        if (results.length % 2 !== 0) {\n          duration = durations[index * 2] + durations[index * 2 + 1] + 1;\n        } else {\n          duration = durations[index * 2] + 1;\n        }\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      } else {\n        startTime = starts[index * 2];\n        duration = starts[index * 2 + 2] - starts[index * 2] - 0.15;\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      }\n\n      let copy = isPlayArr.slice(0, isPlayArr.length);\n      console.log(\"Text: \", results[index]);\n      if (index !== prevKey && prevKey !== -1) {\n        if (!copy[prevKey]) {\n          copy[prevKey] = !copy[prevKey];\n        }\n        audioElement.pause();\n      }\n      if (!isPlayArr[index]) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          console.log(\"Don't Worry\");\n        }\n      }\n      copy[index] = !copy[index];\n      if ((prevKey !== index && isPlayArr[index]) || isEnd === true) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          //\n        }\n\n        audioElement = document.createElement(\"video\");\n\n        audioElement.setAttribute(\"src\", this.state.urlDownLoad);\n        audioElement.value = duration;\n        audioElement._startTime = startTime;\n        audioElement.currentTime = startTime;\n      }\n      if (isEnd === true) isEnd = false;\n\n      const self = this;\n      audioElement.addEventListener(\"timeupdate\", function () {\n        //console.log(audioElement.currentTime);\n        if (\n          audioElement.currentTime - audioElement._startTime >=\n          audioElement.value\n        ) {\n          audioElement.pause();\n          isEnd = true;\n        }\n        if (isEnd) {\n          let copy = isPlayArr.map((i) => true);\n          self.setState({\n            isPlayArr: copy,\n            isEnd: isEnd,\n          });\n        }\n      });\n\n      if (isPlayArr[index]) {\n        audioElement.play();\n      }\n\n      this.setState({\n        isPlayArr: copy,\n        prevKey: index,\n        isEnd: isEnd,\n      });\n    } catch (error) { }\n  }\n  generateButtons() {\n    let { final_text } = this.state;\n\n    return final_text.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {this.state.createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n\n          {this.state.final_text[i].length > 0 ? (\n            <div>\n              <input\n                type=\"text\"\n                name=\"valueInput\"\n                placeholder=\"Typing Answer\"\n                value={this.state.key === i ? this.state.valueInput : \"\"}\n                onChange={(evt) => this.handleChange(evt, i)}\n                style={{\n                  borderRadius: \"5px\",\n                  height: \"30px\",\n                  width: \"200px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n          ) : (\n              <p></p>\n            )}\n          {elements.map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleGuessButtons}\n            >\n              {element}\n            </button>\n          ))}\n          <div>\n            <button\n              className=\"Button\"\n              key={i}\n              onClick={() => this.playAudio(i)}\n              ref=\"play\"\n              onKeyUp={(evt) => this.handleKeyPress(evt, i)}\n            >\n              {this.state.isPlayArr[i] ? \"Play\" : \"Pause\"}\n            </button>\n            {/* <input\n              type=\"hidden\"\n              // onKeyPress={(evt) => this.handleKeyPress(evt, i)}\n              onKeyUp={(evt) => this.handleKeyPress(evt, i)}\n            /> */}\n          </div>\n\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              <audio\n                src=\"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                autoPlay\n                controls\n                hidden\n              ></audio>\n              <h1 id=\"meo\">{this.state.results[i]}</h1>\n            </div>\n          ) : (\n              <div>\n                <button\n                  className=\"Button\"\n                  style={{\n                    background: \"#2c3e50\",\n                    border: \"none\",\n                    color: \"#e2e5e9\",\n                  }}\n                  key={i}\n                  onClick={() => this.showAnswers(i)}\n                >\n                  Show Answer\n              </button>\n              </div>\n            )}\n        </section>\n      );\n    });\n  }\n  handleKeyPress = (event, i) => {\n    let isEnd = this.state.isEnd;\n    if (event.key === \"Space\") {\n      this.playAudio(i);\n    } else if (event.key === \"ArrowLeft\" && !isEnd) {\n      audioElement.currentTime =\n        audioElement.currentTime - 3 > audioElement._startTime\n          ? audioElement.currentTime - 3\n          : audioElement._startTime;\n    } else if (event.key === \"ArrowRight\" && !isEnd) {\n      audioElement.currentTime =\n        audioElement.currentTime + 3 <\n          audioElement._startTime + audioElement.duration\n          ? (audioElement.currentTime += 3)\n          : audioElement.currentTime;\n    }\n  };\n\n  handleChange(evt, key) {\n    let index = this.state.index;\n    let checkAnswer = this.state.checkAnswer;\n    let inputArr = this.state.inputArr;\n    let copy = inputArr.slice(0, inputArr.length);\n    let final_text = this.state.final_text;\n    this.setState(\n      {\n        [evt.target.name]: evt.target.value,\n      },\n      function () {\n        try {\n          if (checkAnswer.length > 0) {\n            let newCheckAnswer = final_text[key].map((s) =>\n              s.replace(\",\", \"\").toLowerCase()\n            );\n            if (this.state.valueInput === \"meowmeow\") {\n              window.responsiveVoice.speak(\n                \"You say meowmeow\",\n                this.state.voice\n              );\n              if (this.state.final_text[key].length === 0) {\n                this.setState({\n                  valueInput: \"\",\n                  index: index + 1,\n                });\n              } else {\n                this.handleGuessButtons(checkAnswer[key][index]);\n                this.setState({\n                  valueInput: \"\",\n                });\n              }\n            }\n            if (\n              this.state.valueInput.trim().toLowerCase() ===\n              checkAnswer[key][index].toLowerCase() &&\n              this.state.final_text[key].length === 0\n            ) {\n              window.responsiveVoice.speak(\n                this.state.valueInput,\n                this.state.voice\n              );\n              if (index === checkAnswer[key].length - 1) {\n                var audio = new Audio(\n                  \"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                );\n                audio.play();\n                console.log(\"Yes\");\n                copy[key] = false;\n              }\n\n              this.setState({\n                valueInput: \"\",\n                index: index + 1,\n                inputArr: copy,\n              });\n            } else if (\n              newCheckAnswer.includes(\n                this.state.valueInput.trim().toLowerCase()\n              ) &&\n              this.state.valueInput[this.state.valueInput.length - 1] === \" \"\n            ) {\n              this.handleGuessButtons(\n                this.state.valueInput.trim().toLowerCase()\n              );\n            }\n          }\n        } catch (error) {\n          console.log(\"Some Wrrong!\");\n        }\n      }\n    );\n  }\n  handleSelectChange(event) {\n    let value = event.target.value;\n    let voice = this.state.voice;\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n    switch (value) {\n      case \"showanswer\":\n        for (let i = 0; i < final_text.length; i++) {\n          final_text[i] = [];\n          createAnswer[i] = this.state.checkAnswer[i];\n        }\n        break;\n      case \"showbutton\":\n        if (this.state.captions.length === 0) {\n          this.showButtons();\n        }\n        break;\n\n      case \"usmale\":\n        voice = \"US English Male\";\n        break;\n      case \"usfemale\":\n        voice = \"US English Female\";\n        break;\n      case \"ukmale\":\n        voice = \"UK English Male\";\n        break;\n      case \"ukfemale\":\n        voice = \"UK English Female\";\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      value: value,\n      final_text: final_text,\n      createAnswer: createAnswer,\n      voice: voice,\n    });\n  }\n\n  showAnswers(key) {\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n\n    final_text[key] = [];\n    createAnswer[key] = this.state.checkAnswer[key];\n    this.setState((str) => ({\n      final_text: final_text,\n      createAnswer: createAnswer,\n    }));\n  }\n  async handleSubmit(evt) {\n    evt.preventDefault();\n    let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n    let urlDownLoad = this.state.urlDownLoad;\n\n    if (urlYouTuBe.length > 0 && urlDownLoad.length > 0) {\n      if (this.state.captions.length === 0 && this.state.urlYouTuBe.length > 0) {\n        urlYouTuBe = this.state.urlYouTuBe;\n        let shortUrl = \"\";\n        for (let i = 0; i < this.state.defaultsYoutubeUrl.length; i++) {\n          if (!urlYouTuBe.indexOf(this.state.defaultsYoutubeUrl[i])) {\n            switch (i) {\n              case 0:\n                shortUrl = urlYouTuBe.split(\"=\")[1].split(\"&\")[0];\n                break;\n              case 1:\n                shortUrl = urlYouTuBe.split(\"/\")[3].slice(0, 11);\n                break;\n              case 2:\n                shortUrl = urlYouTuBe.split(\"=\")[2];\n                break;\n              case 3:\n                shortUrl = urlYouTuBe.split(\"&\")[1].split(\"=\")[1];\n              default:\n                break;\n\n\n            }\n          }\n        }\n        console.log(shortUrl);\n        let captions = [];\n        let starts = [];\n        let durations = [];\n        let deck = await axios.get(\"https://video.google.com/timedtext?&lang=en&v=\" + shortUrl);\n        let string = deck.data.replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n          .split(\"<transcript>\");\n        let result = string[1].split(\"</text>\");\n        console.log(result);\n        result.pop();\n        for (let i = 0; i < result.length; i++) {\n          let arr = result[i].split(\">\");\n          let textOfStartDuration = arr[0].split(\" \");\n          let start = textOfStartDuration[1].split(\"=\")[1];\n          let duration = textOfStartDuration[2].split(\"=\")[1];\n\n          captions.push(\n            arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n          );\n          starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n          durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n        }\n        let length = captions.length;\n        let results = [];\n        if (length % 2 === 0) {\n          for (let i = 0; i < length; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n        } else {\n          for (let i = 0; i < length - 1; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n          results.push(captions[length - 1]);\n        }\n\n        let createAnswer = [];\n        let inputArr = [];\n        let storeIndex = [];\n        let show = [];\n        let checkAnswer = [];\n        let final_text = [];\n        let isPlayArr = [];\n        for (let i = 0; i < results.length; i++) {\n          let arr = [];\n          checkAnswer.push(results[i].split(\" \"));\n          final_text.push(results[i].split(\" \"));\n          inputArr.push(true);\n          storeIndex.push(0);\n          isPlayArr.push(true);\n          show.push(0);\n          for (let j = 0; j < results[i].split(\" \").length; j++) {\n            arr.push(\"___\");\n          }\n          createAnswer.push(arr);\n        }\n        final_text.forEach((element) => Shuffle(element));\n\n        this.setState({\n          captions: captions,\n          starts: starts,\n          durations: durations,\n          results: results,\n          final_text: final_text,\n          createAnswer: createAnswer,\n          inputArr: inputArr,\n          storeIndex: storeIndex,\n          show: show,\n          checkAnswer: checkAnswer,\n          isPlayArr: isPlayArr,\n          submit: false,\n        });\n\n      }\n    }\n  }\n\n  render() {\n    let gameStart = this.generateButtons();\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    //console.clear();\n    return (\n      <div className=\"App\">\n        {this.state.submit ? (\n          <form onSubmit={this.handleSubmit} id=\"form\">\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlDownLoad\"\n                placeholder=\"LinkDownLoad\"\n                value={this.state.urlDownLoad}\n                onChange={this.handleChange}\n              />\n            </label>\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlYouTuBe\"\n                placeholder=\"LinkYouTuBe\"\n                value={this.state.urlYouTuBe}\n                onChange={this.handleChange}\n              />\n            </label>\n            <button id=\"submit\">Submit!</button>\n          </form>\n        ) : (\n            <div>\n              {/* <button onClick={this.showAnswers} className=\"Button\">\n              Show answer\n            </button> */}\n              <section id=\"meo\">\n                <form onSubmit={this.showAnswers}>\n                  <label>\n                    <div className=\"select\">\n                      <select\n                        name=\"slct\"\n                        id=\"slct\"\n                        value={this.state.value}\n                        onChange={this.handleSelectChange}\n                      >\n                        <option value=\"default\">Choose an option</option>\n                        <option value=\"showanswer\">Show Answers</option>\n                        <option value=\"showbutton\">Show Buttons</option>\n                        <option value=\"usmale\">US English Male Voice</option>\n                        <option value=\"usfemale\">US English FeMale Voice</option>\n                        <option value=\"ukmale\">UK English Male Voice</option>\n                        <option value=\"ukfemale\">UK English FeMale Voice</option>\n                      </select>\n                    </div>\n                  </label>\n                </form>\n              </section>\n\n              <p className=\"Hangman-btns\">{gameStart}</p>\n            </div>\n          )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}