{"version":3,"sources":["Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["Shuffle","audioElement","arr","temp","index","ctr","length","Math","floor","random","App","props","handleKeyPress","event","i","isEnd","state","key","playAudio","currentTime","_startTime","duration","english_text","vietnames_text","final_text","guessWord","checkAnswer","createAnswer","storeIndex","countGuess","bool","english","vietnames","submit","value","voice","valueInput","inputArr","urlDownLoad","urlYouTuBe","captions","starts","durations","count","results","isPlayArr","prevKey","isLoaded","defaultsYoutubeUrl","handleGuessButtons","bind","handleGuessBox","handleOtherButton","handleChange","handleSubmit","showAnswers","handleSelectChange","script","document","createElement","src","async","body","appendChild","this","setState","str","evt","ltr","target","window","responsiveVoice","speak","err","console","log","k","slice","replace","toLowerCase","newAnswer","splice","indexOf","copy","text","startTime","parseInt","pause","error","setAttribute","self","addEventListener","map","play","elements","className","onMouseEnter","element","onClick","type","name","placeholder","onChange","style","borderRadius","height","width","fontSize","ref","onKeyUp","autoPlay","controls","hidden","id","background","border","color","newCheckAnswer","s","trim","Audio","includes","preventDefault","split","fetchEstimations","a","payload","FormData","append","fetch","urlServer","method","res","json","estimation","shortUrl","url","axios","get","deck","string","data","RegExp","result","pop","textOfStartDuration","start","push","show","j","forEach","gameStart","generateButtons","onSubmit","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2WAkBeA,ICXXC,EDWWD,EAlBf,SAAiBE,GAMf,IALA,IACIC,EACAC,EAFAC,EAAMH,EAAII,OAKPD,EAAM,GAEXD,EAAQG,KAAKC,MAAMD,KAAKE,SAAWJ,GAInCF,EAAOD,IAFPG,GAGAH,EAAIG,GAAOH,EAAIE,GACfF,EAAIE,GAASD,EAEf,OAAOD,G,+BCytBMQ,G,kBAhuBb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KA8XRC,eAAiB,SAACC,EAAOC,GACvB,IAAIC,EAAQ,EAAKC,MAAMD,MACL,UAAdF,EAAMI,IACR,EAAKC,UAAUJ,GACQ,cAAdD,EAAMI,KAAwBF,EAKhB,eAAdF,EAAMI,KAAyBF,IACxCd,EAAakB,YACXlB,EAAakB,YAAc,EAC3BlB,EAAamB,WAAanB,EAAaoB,SAClCpB,EAAakB,aAAe,EAC7BlB,EAAakB,aATnBlB,EAAakB,YACXlB,EAAakB,YAAc,EAAIlB,EAAamB,WACxCnB,EAAakB,YAAc,EAC3BlB,EAAamB,YApYrB,EAAKJ,MAAQ,CACXM,aAAc,GACdC,eAAgB,GAChBC,WAAY,GACZC,UAAW,GACXC,YAAa,GACbC,aAAc,GACdV,IAAK,EACLb,MAAO,EACPwB,WAAY,GACZC,WAAY,EACZC,MAAM,EACNC,QAAS,GACTC,UAAW,GACXC,QAAQ,EACRC,MAAO,UACPC,MAAO,kBACPC,WAAY,GACZC,SAAU,GACVC,YAAa,GACbC,WAAY,GACZC,SAAU,GACVnB,SAAU,GACVpB,aAAc,GACdwC,OAAQ,GACRC,UAAW,GACXC,MAAO,EACPC,QAAS,GACTC,UAAW,GACXC,SAAU,EACV/B,OAAO,EACPgC,UAAU,EACVC,mBAAoB,CAClB,kCACA,oBACA,kDACA,sDAGJ,EAAKC,mBAAqB,EAAKA,mBAAmBC,KAAxB,gBAC1B,EAAKC,eAAiB,EAAKA,eAAeD,KAApB,gBACtB,EAAKE,kBAAoB,EAAKA,kBAAkBF,KAAvB,gBACzB,EAAKG,aAAe,EAAKA,aAAaH,KAAlB,gBACpB,EAAKI,aAAe,EAAKA,aAAaJ,KAAlB,gBACpB,EAAKK,YAAc,EAAKA,YAAYL,KAAjB,gBACnB,EAAKM,mBAAqB,EAAKA,mBAAmBN,KAAxB,gBAC1B,EAAKhC,UAAY,EAAKA,UAAUgC,KAAf,gBAjDA,E,iFAoDjB,IAAMO,EAASC,SAASC,cAAc,UAEtCF,EAAOG,IACL,mEACFH,EAAOI,OAAQ,EAEfH,SAASI,KAAKC,YAAYN,K,qCAGbxC,GAGTA,IAAQ+C,KAAKhD,MAAMC,KACrB+C,KAAKC,UAAS,SAACC,GAAD,MAAU,CAEtBjD,IAAKA,EACLb,MAAO,EACPyB,WAAY,Q,wCAKAsC,GAChB,IAAIC,EAAMD,EAAIE,OAAOnC,MACT,QAARkC,GAGFE,OAAOC,gBAAgBC,MAAMJ,EAAKJ,KAAKhD,MAAMmB,S,yCAG9BgC,GAAM,IACnBC,EADkB,OAEtB,IACEA,EAAMD,EAAIE,OAAOnC,MACjB,MAAOuC,GACPL,EAAMD,EAGRO,QAAQC,IAAIP,GARU,MAgBlBJ,KAAKhD,MANPC,EAVoB,EAUpBA,IACAW,EAXoB,EAWpBA,WACAC,EAZoB,EAYpBA,WACAH,EAboB,EAapBA,YAEAC,GAfoB,EAcpBG,KAdoB,EAepBH,cAEIiD,EAAIhD,EAAWX,GACjBY,EAAa,GAGfyC,OAAOC,gBAAgBC,MAAMJ,EAAKJ,KAAKhD,MAAMmB,OAK/C,IAAIX,EAAawC,KAAKhD,MAAMQ,WAAWqD,MACrC,EACAb,KAAKhD,MAAMQ,WAAWlB,QAExB,GACEoB,EAAYT,GAAK2D,GAAGE,QAAQ,IAAK,IAAIC,gBACrCX,EAAIU,QAAQ,IAAK,IAAIC,cACrB,CACA,IAAIC,EAAYrD,EAAakD,MAAM,EAAGlD,EAAarB,QAMnDkB,EAAWP,GAAKgE,OAAOzD,EAAWP,GAAKiE,QAAQxD,EAAYT,GAAK2D,IAAK,GAQrEI,EAAU/D,GAAK2D,GAAKlD,EAAYT,GAAK2D,GACrC,IAAIO,EAAOvD,EAAWiD,MAAM,EAAGjD,EAAWtB,QAC1C6E,EAAKlE,GAAO2D,EAAI,EAChBZ,KAAKC,UAAS,SAACC,GAAD,MAAU,CACtBvC,aAAcqD,EACd5E,MAAOwE,EAAI,EACXnD,UAAW,EAAKT,MAAMU,YAAYT,GAAK2D,GACvCpD,WAAYA,EACZI,WAAYuD,EACZtD,WAAY,EACZC,MAAM,EACNM,WAAY,OAEVwC,EAAI,IAAMlD,EAAYT,GAAKX,QAC7B0D,KAAKC,UAAS,SAACC,GAAD,MAAU,CACtB9D,MAAO,UAGN,CAEL,IADAyB,GAA0B,IACR,EAAG,CAGnB,IAAIuD,EAAI,2BAAuB1D,EAAYT,GAAK2D,IAGhDN,OAAOC,gBAAgBC,MAAMY,EAAMpB,KAAKhD,MAAMmB,OAO9C6B,KAAKC,UAAS,SAACC,GAAD,MAAU,CACtB9B,WAAY,OAIhB4B,KAAKC,UAAS,SAACC,GAAD,MAAU,CACtBzC,UAAWC,EAAYT,GAAK2D,GAC5B/C,WAAYA,EACZC,MAAM,S,qCAKGb,GAC6B,IAAtC+C,KAAKhD,MAAMQ,WAAWP,GAAKX,QAC7BgE,OAAOC,gBAAgBC,MACrBR,KAAKhD,MAAMM,aAAaL,GACxB+C,KAAKhD,MAAMmB,S,gCAQP/B,GACR,IAAK,IASCiF,EAAWhE,EATb,EAQE2C,KAAKhD,MANPyB,EAFA,EAEAA,OACAC,EAHA,EAGAA,UACAE,EAJA,EAIAA,QACAC,EALA,EAKAA,UACAC,EANA,EAMAA,QACA/B,EAPA,EAOAA,MAGEX,IAAUwC,EAAQtC,OAAS,GAC7B+E,EAAY5C,EAAe,EAARrC,GAEjBiB,EADEuB,EAAQtC,OAAS,IAAM,EACdoC,EAAkB,EAARtC,GAAasC,EAAkB,EAARtC,EAAY,GAAK,EAElDsC,EAAkB,EAARtC,GAAa,EAEpCsE,QAAQC,IACN,QACAW,SAASD,EAAY,IAAOA,EAAY,GAAM,IAC9C,WACAhE,KAGFgE,EAAY5C,EAAe,EAARrC,GACnBiB,EAAWoB,EAAe,EAARrC,EAAY,GAAKqC,EAAe,EAARrC,GAAa,IACvDsE,QAAQC,IACN,QACAW,SAASD,EAAY,IAAOA,EAAY,GAAM,IAC9C,WACAhE,IAIJ,IAAI8D,EAAOtC,EAAUgC,MAAM,EAAGhC,EAAUvC,QAQxC,GAPAoE,QAAQC,IAAI,SAAU/B,EAAQxC,IAC1BA,IAAU0C,IAAwB,IAAbA,IAClBqC,EAAKrC,KACRqC,EAAKrC,IAAYqC,EAAKrC,IAExB7C,EAAasF,UAEV1C,EAAUzC,GACb,IACEH,EAAasF,QACb,MAAOC,GACPd,QAAQC,IAAI,eAIhB,GADAQ,EAAK/E,IAAU+E,EAAK/E,GACf0C,IAAY1C,GAASyC,EAAUzC,KAAqB,IAAVW,EAAgB,CAC7D,IACEd,EAAasF,QACb,MAAOC,KAITvF,EAAeyD,SAASC,cAAc,UAEzB8B,aAAa,MAAOzB,KAAKhD,MAAMsB,aAC5CrC,EAAaiC,MAAQb,EACrBpB,EAAamB,WAAaiE,EAC1BpF,EAAakB,YAAckE,GAEf,IAAVtE,IAAgBA,GAAQ,GAE5B,IAAM2E,EAAO1B,KACb/D,EAAa0F,iBAAiB,cAAc,WAS1C,GANE1F,EAAakB,YAAclB,EAAamB,YACxCnB,EAAaiC,QAEbjC,EAAasF,QACbxE,GAAQ,GAENA,EAAO,CACT,IAAIoE,EAAOtC,EAAU+C,KAAI,SAAC9E,GAAD,OAAO,KAChC4E,EAAKzB,SAAS,CACZpB,UAAWsC,EACXpE,MAAOA,QAKT8B,EAAUzC,IACZH,EAAa4F,OAGf7B,KAAKC,SAAS,CACZpB,UAAWsC,EACXrC,QAAS1C,EACTW,MAAOA,IAET,MAAOyE,O,wCAEQ,IAAD,SACmBxB,KAAKhD,MAAlCQ,EADU,EACVA,WAAYG,EADF,EACEA,aAElB,OAAOH,EAAWoE,KAAI,SAACE,EAAUhF,GAC/B,OACE,6BACEiF,UAAU,YACV9E,IAAKH,EACLoB,MAAOpB,EACPkF,aAAc,kBAAM,EAAK7C,eAAerC,KAEvCa,EAAab,GAAG8E,KAAI,SAACK,EAAS7F,GAAV,OACnB,4BACE2F,UAAU,SACV9E,IAAKb,EACL8B,MAAO+D,EACPC,QAAS,EAAK9C,mBAEb6C,MAIJ,EAAKjF,MAAMQ,WAAWV,GAAGR,OAAS,EACjC,6BACE,2BACE6F,KAAK,OACLC,KAAK,aACLC,YAAY,gBACZnE,MAAO,EAAKlB,MAAMC,MAAQH,EAAI,EAAKE,MAAMoB,WAAa,GACtDkE,SAAU,SAACnC,GAAD,OAAS,EAAKd,aAAac,EAAKrD,IAC1CyF,MAAO,CACLC,aAAc,MACdC,OAAQ,OACRC,MAAO,QACPC,SAAU,WAKhB,4BAEDb,EAASF,KAAI,SAACK,EAAS7F,GAAV,OACZ,4BACE2F,UAAU,SACV9E,IAAKb,EACL8B,MAAO+D,EACPC,QAAS,EAAKjD,oBAEbgD,MAGL,6BACE,4BACEF,UAAU,SACV9E,IAAKH,EACLoF,QAAS,kBAAM,EAAKhF,UAAUJ,IAC9B8F,IAAI,OACJC,QAAS,SAAC1C,GAAD,OAAS,EAAKvD,eAAeuD,EAAKrD,KAE1C,EAAKE,MAAM6B,UAAU/B,GAAK,OAAS,UASH,IAApC,EAAKE,MAAMQ,WAAWV,GAAGR,OACxB,6BACE,2BACEsD,IAAI,4CACJkD,UAAQ,EACRC,UAAQ,EACRC,QAAM,IAER,wBAAIC,GAAG,OAAO,EAAKjG,MAAM4B,QAAQ9B,KAGnC,6BACE,4BACEiF,UAAU,SACVQ,MAAO,CACLW,WAAY,UACZC,OAAQ,OACRC,MAAO,WAETnG,IAAKH,EACLoF,QAAS,kBAAM,EAAK3C,YAAYzC,KARlC,sB,mCAoCCqD,EAAKlD,GAAM,IAAD,EAC0C+C,KAAKhD,MAA9DZ,EADe,EACfA,MAAOsB,EADQ,EACRA,YAAaW,EADL,EACKA,SAAUb,EADf,EACeA,WAAYY,EAD3B,EAC2BA,WAC5C+C,EAAO9C,EAASwC,MAAM,EAAGxC,EAAS/B,QAEtC0D,KAAKC,SAAL,eAEKE,EAAIE,OAAO+B,KAAOjC,EAAIE,OAAOnC,QAEhC,WACE,IACE,GAAIR,EAAYpB,OAAS,EAAG,CAC1B,IAAI+G,EAAiB7F,EAAWP,GAAK2E,KAAI,SAAC0B,GAAD,OACvCA,EAAExC,QAAQ,IAAK,IAAIC,iBAmBrB,GAjBmB,aAAf3C,IACFkC,OAAOC,gBAAgBC,MACrB,mBACAR,KAAKhD,MAAMmB,OAEkB,IAA3BX,EAAWP,GAAKX,OAClB0D,KAAKC,SAAS,CACZ7B,WAAY,GACZhC,MAAOA,EAAQ,KAGjB4D,KAAKf,mBAAmBvB,EAAYT,GAAKb,IACzC4D,KAAKC,SAAS,CACZ7B,WAAY,OAKhBA,EAAWmF,OAAOxC,gBAChBrD,EAAYT,GAAKb,GAAO2E,eACC,IAA3BvD,EAAWP,GAAKX,OAChB,CAKA,GAJAgE,OAAOC,gBAAgBC,MACrBR,KAAKhD,MAAMoB,WACX4B,KAAKhD,MAAMmB,OAET/B,IAAUsB,EAAYT,GAAKX,OAAS,EAC1B,IAAIkH,MACd,6CAEI3B,OACNnB,QAAQC,IAAI,OACZQ,EAAKlE,IAAO,EAGd+C,KAAKC,SAAS,CACZ7B,WAAY,GACZhC,MAAOA,EAAQ,EACfiC,SAAU8C,SAGZkC,EAAeI,SAASrF,EAAWmF,OAAOxC,gBACJ,MAAtC3C,EAAWA,EAAW9B,OAAS,IAE/B0D,KAAKf,mBAAmBb,EAAWmF,OAAOxC,gBAG9C,MAAOS,GACPd,QAAQC,IAAI,sB,yCAKD9D,GACjB,IAAIqB,EAAQrB,EAAMwD,OAAOnC,MACrBC,EAAQ6B,KAAKhD,MAAMmB,MACnBX,EAAawC,KAAKhD,MAAMQ,WAAWqD,MACrC,EACAb,KAAKhD,MAAMQ,WAAWlB,QAEpBqB,EAAeqC,KAAKhD,MAAMW,aAAakD,MACzC,EACAb,KAAKhD,MAAMW,aAAarB,QAE1B,OAAQ4B,GACN,IAAK,aACH,IAAK,IAAIpB,EAAI,EAAGA,EAAIU,EAAWlB,OAAQQ,IACrCU,EAAWV,GAAK,GAChBa,EAAab,GAAKkD,KAAKhD,MAAMU,YAAYZ,GAE3C,MAEF,IAAK,SACHqB,EAAQ,kBACR,MACF,IAAK,WACHA,EAAQ,oBACR,MACF,IAAK,SACHA,EAAQ,kBACR,MACF,IAAK,WACHA,EAAQ,oBAKZ6B,KAAKC,SAAS,CACZ/B,MAAOA,EACPV,WAAYA,EACZG,aAAcA,EACdQ,MAAOA,M,kCAIClB,GACV,IAAIO,EAAawC,KAAKhD,MAAMQ,WAAWqD,MACrC,EACAb,KAAKhD,MAAMQ,WAAWlB,QAEpBqB,EAAeqC,KAAKhD,MAAMW,aAAakD,MACzC,EACAb,KAAKhD,MAAMW,aAAarB,QAG1BkB,EAAWP,GAAO,GAClBU,EAAaV,GAAO+C,KAAKhD,MAAMU,YAAYT,GAC3C+C,KAAKC,UAAS,SAACC,GAAD,MAAU,CACtB1C,WAAYA,EACZG,aAAcA,Q,4EAGCwC,G,sIACjBA,EAAIuD,oBACAnF,EAAayB,KAAKhD,MAAMuB,WAAWoF,MAAM,MAG9BrH,OAAS,G,oBACtB0D,KAAKC,SAAS,CAAEhC,QAAQ,MAES,IAA/B+B,KAAKhD,MAAMwB,SAASlC,QACpB0D,KAAKhD,MAAMuB,WAAWjC,OAAS,G,iBAyBhBsH,E,uCAAf,WAAgCxC,GAAhC,mBAAAyC,EAAA,6DACQC,EAAU,IAAIC,UACZC,OAAO,OAAQ5C,GACL,uCAHpB,SAIoB6C,MAAMC,2CAAoB,CAC1CC,OAAQ,OACRrE,KAAMgE,IANV,cAIQM,EAJR,gBAS2BA,EAAIC,OAT/B,cASQC,EATR,OAUE5D,QAAQC,IAAI2D,GAVd,kBAWSA,GAXT,4C,sDAvBA/F,EAAayB,KAAKhD,MAAMuB,WACpBgG,EAAW,GACNzH,EAAI,E,YAAGA,EAAIkD,KAAKhD,MAAMgC,mBAAmB1C,Q,oBAC3CiC,EAAW2C,QAAQlB,KAAKhD,MAAMgC,mBAAmBlC,I,sBAC5CA,E,OACD,I,QAGA,I,QAGA,I,QAGA,I,gCARHyH,EAAWhG,EAAWoF,MAAM,KAAK,GAAGA,MAAM,KAAK,G,oCAG/CY,EAAWhG,EAAWoF,MAAM,KAAK,GAAG9C,MAAM,EAAG,I,oCAG7C0D,EAAWhG,EAAWoF,MAAM,KAAK,G,6BAGjCY,EAAWhG,EAAWoF,MAAM,KAAK,GAAGA,MAAM,KAAK,G,4CAbG7G,I,8BAmBpD0H,EAAMxE,KAAKhD,MAAMgC,mBAAmB,GAAK,IAAMuF,E,UAe7BX,EAAiBY,G,eAArClG,E,OACJoC,QAAQC,IAAI4D,GACR/F,EAAW,GACXC,EAAS,GACTC,EAAY,G,UACC+F,IAAMC,IACrB,iDAAmDH,G,QASrD,IAVII,E,OAGAC,EAASD,EAAKE,KACf/D,QAAQ,IAAIgE,OAAO,QAAS,KAAM,KAClChE,QAAQ,IAAIgE,OAAO,YAAa,KAAM,KACtChE,QAAQ,IAAIgE,OAAO,YAAa,KAAM,OACtCnB,MAAM,iBACLoB,EAASH,EAAO,GAAGjB,MAAM,YACtBqB,MACElI,EAAI,EAAGA,EAAIiI,EAAOzI,OAAQQ,IAC7BZ,EAAM6I,EAAOjI,GAAG6G,MAAM,KACtBsB,EAAsB/I,EAAI,GAAGyH,MAAM,KACnCuB,EAAQD,EAAoB,GAAGtB,MAAM,KAAK,GAC1CtG,EAAW4H,EAAoB,GAAGtB,MAAM,KAAK,GAEjDnF,EAAS2G,KACPjJ,EAAI,GAAG4E,QAAQ,IAAIgE,OAAO,0BAA2B,KAAM,KAE7DrG,EAAO0G,MAAMD,EAAMpE,QAAQ,IAAIgE,OAAO,IAAK,KAAM,KACjDpG,EAAUyG,MAAM9H,EAASyD,QAAQ,IAAIgE,OAAO,IAAK,KAAM,KAIzD,GAFIxI,EAASkC,EAASlC,OAClBsC,EAAU,GACVtC,EAAS,IAAM,EACjB,IAASQ,EAAI,EAAGA,EAAIR,EAAQQ,GAAK,EAC/B8B,EAAQuG,KAAK3G,EAAS1B,GAAK,IAAM0B,EAAS1B,EAAI,QAE3C,CACL,IAASA,EAAI,EAAGA,EAAIR,EAAS,EAAGQ,GAAK,EACnC8B,EAAQuG,KAAK3G,EAAS1B,GAAK,IAAM0B,EAAS1B,EAAI,IAEhD8B,EAAQuG,KAAK3G,EAASlC,EAAS,IAUjC,IAPIqB,EAAe,GACfU,EAAW,GACXT,EAAa,GACbwH,EAAO,GACP1H,EAAc,GACdF,EAAa,GACbqB,EAAY,GACP/B,EAAI,EAAGA,EAAI8B,EAAQtC,OAAQQ,IAAK,CAQvC,IAPIZ,EAAM,GACVwB,EAAYyH,KAAKvG,EAAQ9B,GAAG6G,MAAM,MAClCnG,EAAW2H,KAAKvG,EAAQ9B,GAAG6G,MAAM,MACjCtF,EAAS8G,MAAK,GACdvH,EAAWuH,KAAK,GAChBtG,EAAUsG,MAAK,GACfC,EAAKD,KAAK,GACDE,EAAI,EAAGA,EAAIzG,EAAQ9B,GAAG6G,MAAM,KAAKrH,OAAQ+I,IAChDnJ,EAAIiJ,KAAK,OAEXxH,EAAawH,KAAKjJ,GAEpBsB,EAAW8H,SAAQ,SAACrD,GAAD,OAAajG,EAAQiG,MAExCjC,KAAKC,SAAS,CACZzB,SAAUA,EACVF,YAAaA,EACbG,OAAQA,EACRC,UAAWA,EACXE,QAASA,EACTpB,WAAYA,EACZG,aAAcA,EACdU,SAAUA,EACVT,WAAYA,EACZwH,KAAMA,EACN1H,YAAaA,EACbmB,UAAWA,EACXE,UAAU,I,uIAQhB,IAAIwG,EAAYvF,KAAKwF,kBAKrB,OAJIxF,KAAKhD,MAAMS,YAAcuC,KAAKhD,MAAMM,aAAa0C,KAAKhD,MAAMC,MAC9DyD,QAAQC,IAAI,0BAIZ,yBAAKoB,UAAU,OACZ/B,KAAKhD,MAAMiB,OACV,yBAAKgF,GAAG,QAMN,0BAAMwC,SAAUzF,KAAKV,cAUnB,+BACE,2BACE6C,KAAK,OACLC,KAAK,aACLC,YAAY,cACZnE,MAAO8B,KAAKhD,MAAMuB,WAClB+D,SAAUtC,KAAKX,gBAGnB,4BAAQ4D,GAAG,UAAX,aAIJ,6BACGjD,KAAKhD,MAAM+B,SACV,6BACE,6BAASkE,GAAG,OACV,0BAAMwC,SAAUzF,KAAKT,aACnB,+BACE,yBAAKwC,UAAU,UACb,4BACEK,KAAK,OACLa,GAAG,OACH/E,MAAO8B,KAAKhD,MAAMkB,MAClBoE,SAAUtC,KAAKR,oBAEf,4BAAQtB,MAAM,WAAd,oBACA,4BAAQA,MAAM,cAAd,gBACA,4BAAQA,MAAM,UAAd,yBACA,4BAAQA,MAAM,YAAd,2BAGA,4BAAQA,MAAM,UAAd,yBACA,4BAAQA,MAAM,YAAd,gCAQV,uBAAG6D,UAAU,gBAAgBwD,IAG/B,yBAAKxD,UAAU,WACb,yBAAKA,UAAU,wB,GAvtBb2D,cCIEC,QACW,cAA7BrF,OAAOsF,SAASC,UAEe,UAA7BvF,OAAOsF,SAASC,UAEhBvF,OAAOsF,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAStG,SAASuG,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.2cfcb27c.chunk.js","sourcesContent":["function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nvar audioElement;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      english_text: \"\",\n      vietnames_text: \"\",\n      final_text: [],\n      guessWord: \"\",\n      checkAnswer: [],\n      createAnswer: [],\n      key: 0,\n      index: 0,\n      storeIndex: \"\",\n      countGuess: 0,\n      bool: false,\n      english: \"\",\n      vietnames: \"\",\n      submit: true,\n      value: \"default\",\n      voice: \"US English Male\",\n      valueInput: \"\",\n      inputArr: [],\n      urlDownLoad: \"\",\n      urlYouTuBe: \"\",\n      captions: [],\n      duration: \"\",\n      audioElement: \"\",\n      starts: [],\n      durations: [],\n      count: 0,\n      results: [],\n      isPlayArr: [],\n      prevKey: -1,\n      isEnd: false,\n      isLoaded: false,\n      defaultsYoutubeUrl: [\n        \"https://www.youtube.com/watch?v\",\n        \"https://youtu.be/\",\n        \"https://m.youtube.com/watch?feature=youtu.be&v=\",\n        \"https://www.youtube.com/watch?feature=youtu.be&v=\",\n      ],\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.showAnswers = this.showAnswers.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.playAudio = this.playAudio.bind(this);\n  }\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  handleGuessBox(key) {\n    // && this.state.guessWord.length > 0\n    // let copy = this.state.isPlayArr.map((bool) => true);\n    if (key !== this.state.key) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n        //   isPlayArr: copy,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, this.state.voice);\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr;\n    try {\n      ltr = evt.target.value;\n    } catch (err) {\n      ltr = evt;\n    }\n\n    console.log(ltr);\n    let {\n      key,\n      storeIndex,\n      countGuess,\n      checkAnswer,\n      bool,\n      createAnswer,\n    } = this.state;\n    const k = storeIndex[key];\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, this.state.voice);\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      checkAnswer[key][k].replace(\",\", \"\").toLowerCase() ===\n      ltr.replace(\",\", \"\").toLowerCase()\n    ) {\n      let newAnswer = createAnswer.slice(0, createAnswer.length);\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        // window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      final_text[key].splice(final_text[key].indexOf(checkAnswer[key][k]), 1);\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        //window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      newAnswer[key][k] = checkAnswer[key][k];\n      let copy = storeIndex.slice(0, storeIndex.length);\n      copy[key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: this.state.checkAnswer[key][k],\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n        valueInput: \"\",\n      }));\n      if (k + 1 === checkAnswer[key].length) {\n        this.setState((str) => ({\n          index: 0,\n        }));\n      }\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = `The next word is ${checkAnswer[key][k]}`;\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, this.state.voice);\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n        this.setState((str) => ({\n          valueInput: \"\",\n        }));\n      }\n\n      this.setState((str) => ({\n        guessWord: checkAnswer[key][k],\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        this.state.voice\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n\n  playAudio(index) {\n    try {\n      let {\n        starts,\n        durations,\n        results,\n        isPlayArr,\n        prevKey,\n        isEnd,\n      } = this.state;\n      let startTime, duration;\n      if (index === results.length - 1) {\n        startTime = starts[index * 2];\n        if (results.length % 2 !== 0) {\n          duration = durations[index * 2] + durations[index * 2 + 1] + 1;\n        } else {\n          duration = durations[index * 2] + 1;\n        }\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      } else {\n        startTime = starts[index * 2];\n        duration = starts[index * 2 + 2] - starts[index * 2] - 0.15;\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      }\n\n      let copy = isPlayArr.slice(0, isPlayArr.length);\n      console.log(\"Text: \", results[index]);\n      if (index !== prevKey && prevKey !== -1) {\n        if (!copy[prevKey]) {\n          copy[prevKey] = !copy[prevKey];\n        }\n        audioElement.pause();\n      }\n      if (!isPlayArr[index]) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          console.log(\"Don't Worry\");\n        }\n      }\n      copy[index] = !copy[index];\n      if ((prevKey !== index && isPlayArr[index]) || isEnd === true) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          //\n        }\n\n        audioElement = document.createElement(\"video\");\n\n        audioElement.setAttribute(\"src\", this.state.urlDownLoad);\n        audioElement.value = duration;\n        audioElement._startTime = startTime;\n        audioElement.currentTime = startTime;\n      }\n      if (isEnd === true) isEnd = false;\n\n      const self = this;\n      audioElement.addEventListener(\"timeupdate\", function () {\n        //console.log(audioElement.currentTime);\n        if (\n          audioElement.currentTime - audioElement._startTime >=\n          audioElement.value\n        ) {\n          audioElement.pause();\n          isEnd = true;\n        }\n        if (isEnd) {\n          let copy = isPlayArr.map((i) => true);\n          self.setState({\n            isPlayArr: copy,\n            isEnd: isEnd,\n          });\n        }\n      });\n\n      if (isPlayArr[index]) {\n        audioElement.play();\n      }\n\n      this.setState({\n        isPlayArr: copy,\n        prevKey: index,\n        isEnd: isEnd,\n      });\n    } catch (error) {}\n  }\n  generateButtons() {\n    let { final_text, createAnswer } = this.state;\n\n    return final_text.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n\n          {this.state.final_text[i].length > 0 ? (\n            <div>\n              <input\n                type=\"text\"\n                name=\"valueInput\"\n                placeholder=\"Typing Answer\"\n                value={this.state.key === i ? this.state.valueInput : \"\"}\n                onChange={(evt) => this.handleChange(evt, i)}\n                style={{\n                  borderRadius: \"5px\",\n                  height: \"30px\",\n                  width: \"200px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n          ) : (\n            <p></p>\n          )}\n          {elements.map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleGuessButtons}\n            >\n              {element}\n            </button>\n          ))}\n          <div>\n            <button\n              className=\"Button\"\n              key={i}\n              onClick={() => this.playAudio(i)}\n              ref=\"play\"\n              onKeyUp={(evt) => this.handleKeyPress(evt, i)}\n            >\n              {this.state.isPlayArr[i] ? \"Play\" : \"Pause\"}\n            </button>\n            {/* <input\n              type=\"hidden\"\n              // onKeyPress={(evt) => this.handleKeyPress(evt, i)}\n              onKeyUp={(evt) => this.handleKeyPress(evt, i)}\n            /> */}\n          </div>\n\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              <audio\n                src=\"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                autoPlay\n                controls\n                hidden\n              ></audio>\n              <h1 id=\"meo\">{this.state.results[i]}</h1>\n            </div>\n          ) : (\n            <div>\n              <button\n                className=\"Button\"\n                style={{\n                  background: \"#2c3e50\",\n                  border: \"none\",\n                  color: \"#e2e5e9\",\n                }}\n                key={i}\n                onClick={() => this.showAnswers(i)}\n              >\n                Show Answer\n              </button>\n            </div>\n          )}\n        </section>\n      );\n    });\n  }\n  handleKeyPress = (event, i) => {\n    let isEnd = this.state.isEnd;\n    if (event.key === \"Space\") {\n      this.playAudio(i);\n    } else if (event.key === \"ArrowLeft\" && !isEnd) {\n      audioElement.currentTime =\n        audioElement.currentTime - 3 > audioElement._startTime\n          ? audioElement.currentTime - 3\n          : audioElement._startTime;\n    } else if (event.key === \"ArrowRight\" && !isEnd) {\n      audioElement.currentTime =\n        audioElement.currentTime + 3 <\n        audioElement._startTime + audioElement.duration\n          ? (audioElement.currentTime += 3)\n          : audioElement.currentTime;\n    }\n  };\n\n  handleChange(evt, key) {\n    let { index, checkAnswer, inputArr, final_text, valueInput } = this.state;\n    let copy = inputArr.slice(0, inputArr.length);\n\n    this.setState(\n      {\n        [evt.target.name]: evt.target.value,\n      },\n      function () {\n        try {\n          if (checkAnswer.length > 0) {\n            let newCheckAnswer = final_text[key].map((s) =>\n              s.replace(\",\", \"\").toLowerCase()\n            );\n            if (valueInput === \"meowmeow\") {\n              window.responsiveVoice.speak(\n                \"You say meowmeow\",\n                this.state.voice\n              );\n              if (final_text[key].length === 0) {\n                this.setState({\n                  valueInput: \"\",\n                  index: index + 1,\n                });\n              } else {\n                this.handleGuessButtons(checkAnswer[key][index]);\n                this.setState({\n                  valueInput: \"\",\n                });\n              }\n            }\n            if (\n              valueInput.trim().toLowerCase() ===\n                checkAnswer[key][index].toLowerCase() &&\n              final_text[key].length === 0\n            ) {\n              window.responsiveVoice.speak(\n                this.state.valueInput,\n                this.state.voice\n              );\n              if (index === checkAnswer[key].length - 1) {\n                var audio = new Audio(\n                  \"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                );\n                audio.play();\n                console.log(\"Yes\");\n                copy[key] = false;\n              }\n\n              this.setState({\n                valueInput: \"\",\n                index: index + 1,\n                inputArr: copy,\n              });\n            } else if (\n              newCheckAnswer.includes(valueInput.trim().toLowerCase()) &&\n              valueInput[valueInput.length - 1] === \" \"\n            ) {\n              this.handleGuessButtons(valueInput.trim().toLowerCase());\n            }\n          }\n        } catch (error) {\n          console.log(\"Some Wrrong!\");\n        }\n      }\n    );\n  }\n  handleSelectChange(event) {\n    let value = event.target.value;\n    let voice = this.state.voice;\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n    switch (value) {\n      case \"showanswer\":\n        for (let i = 0; i < final_text.length; i++) {\n          final_text[i] = [];\n          createAnswer[i] = this.state.checkAnswer[i];\n        }\n        break;\n\n      case \"usmale\":\n        voice = \"US English Male\";\n        break;\n      case \"usfemale\":\n        voice = \"US English Female\";\n        break;\n      case \"ukmale\":\n        voice = \"UK English Male\";\n        break;\n      case \"ukfemale\":\n        voice = \"UK English Female\";\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      value: value,\n      final_text: final_text,\n      createAnswer: createAnswer,\n      voice: voice,\n    });\n  }\n\n  showAnswers(key) {\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n\n    final_text[key] = [];\n    createAnswer[key] = this.state.checkAnswer[key];\n    this.setState((str) => ({\n      final_text: final_text,\n      createAnswer: createAnswer,\n    }));\n  }\n  async handleSubmit(evt) {\n    evt.preventDefault();\n    let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n    //let urlDownLoad = this.state.urlDownLoad;\n    //if (urlYouTuBe.length > 0 && urlDownLoad.length > 0)\n    if (urlYouTuBe.length > 0 ) {\n      this.setState({ submit: false });\n      if (\n        this.state.captions.length === 0 &&\n        this.state.urlYouTuBe.length > 0\n      ) {\n        urlYouTuBe = this.state.urlYouTuBe;\n        let shortUrl = \"\";\n        for (let i = 0; i < this.state.defaultsYoutubeUrl.length; i++) {\n          if (!urlYouTuBe.indexOf(this.state.defaultsYoutubeUrl[i])) {\n            switch (i) {\n              case 0:\n                shortUrl = urlYouTuBe.split(\"=\")[1].split(\"&\")[0];\n                break;\n              case 1:\n                shortUrl = urlYouTuBe.split(\"/\")[3].slice(0, 11);\n                break;\n              case 2:\n                shortUrl = urlYouTuBe.split(\"=\")[2];\n                break;\n              case 3:\n                shortUrl = urlYouTuBe.split(\"&\")[1].split(\"=\")[1];\n              default:\n                break;\n            }\n          }\n        }\n        const url = this.state.defaultsYoutubeUrl[0] + \"=\" + shortUrl\n\n        async function fetchEstimations(text) {\n          const payload = new FormData();\n          payload.append(\"text\", text);\n          const urlServer = 'https://flasklasttime.herokuapp.com/'\n          const res = await fetch(urlServer + \"calc\", {\n            method: \"post\",\n            body: payload,\n          });\n        \n          const estimation = await res.json();\n          console.log(estimation);\n          return estimation;\n        }\n        let urlDownLoad = await fetchEstimations(url)\n        console.log(shortUrl);\n        let captions = [];\n        let starts = [];\n        let durations = [];\n        let deck = await axios.get(\n          \"https://video.google.com/timedtext?&lang=en&v=\" + shortUrl\n        );\n        let string = deck.data\n          .replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n          .split(\"<transcript>\");\n        let result = string[1].split(\"</text>\");\n        result.pop();\n        for (let i = 0; i < result.length; i++) {\n          let arr = result[i].split(\">\");\n          let textOfStartDuration = arr[0].split(\" \");\n          let start = textOfStartDuration[1].split(\"=\")[1];\n          let duration = textOfStartDuration[2].split(\"=\")[1];\n\n          captions.push(\n            arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n          );\n          starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n          durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n        }\n        let length = captions.length;\n        let results = [];\n        if (length % 2 === 0) {\n          for (let i = 0; i < length; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n        } else {\n          for (let i = 0; i < length - 1; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n          results.push(captions[length - 1]);\n        }\n\n        let createAnswer = [];\n        let inputArr = [];\n        let storeIndex = [];\n        let show = [];\n        let checkAnswer = [];\n        let final_text = [];\n        let isPlayArr = [];\n        for (let i = 0; i < results.length; i++) {\n          let arr = [];\n          checkAnswer.push(results[i].split(\" \"));\n          final_text.push(results[i].split(\" \"));\n          inputArr.push(true);\n          storeIndex.push(0);\n          isPlayArr.push(true);\n          show.push(0);\n          for (let j = 0; j < results[i].split(\" \").length; j++) {\n            arr.push(\"___\");\n          }\n          createAnswer.push(arr);\n        }\n        final_text.forEach((element) => Shuffle(element));\n\n        this.setState({\n          captions: captions,\n          urlDownLoad: urlDownLoad,\n          starts: starts,\n          durations: durations,\n          results: results,\n          final_text: final_text,\n          createAnswer: createAnswer,\n          inputArr: inputArr,\n          storeIndex: storeIndex,\n          show: show,\n          checkAnswer: checkAnswer,\n          isPlayArr: isPlayArr,\n          isLoaded: true,\n          //submit: false,\n        });\n      }\n    }\n  }\n\n  render() {\n    let gameStart = this.generateButtons();\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    //console.clear();\n    return (\n      <div className=\"App\">\n        {this.state.submit ? (\n          <div id=\"form\">\n            {/* <iframe\n              width=\"420\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/Ye1ACgqbF_4\"\n            ></iframe> */}\n            <form onSubmit={this.handleSubmit}>\n              {/* <label>\n                <input\n                  type=\"text\"\n                  name=\"urlDownLoad\"\n                  placeholder=\"LinkDownLoad\"\n                  value={this.state.urlDownLoad}\n                  onChange={this.handleChange}\n                />\n              </label> */}\n              <label>\n                <input\n                  type=\"text\"\n                  name=\"urlYouTuBe\"\n                  placeholder=\"LinkYouTuBe\"\n                  value={this.state.urlYouTuBe}\n                  onChange={this.handleChange}\n                />\n              </label>\n              <button id=\"submit\">Submit!</button>\n            </form>\n          </div>\n        ) : (\n          <div>\n            {this.state.isLoaded ? (\n              <div>\n                <section id=\"meo\">\n                  <form onSubmit={this.showAnswers}>\n                    <label>\n                      <div className=\"select\">\n                        <select\n                          name=\"slct\"\n                          id=\"slct\"\n                          value={this.state.value}\n                          onChange={this.handleSelectChange}\n                        >\n                          <option value=\"default\">Choose an option</option>\n                          <option value=\"showanswer\">Show Answers</option>\n                          <option value=\"usmale\">US English Male Voice</option>\n                          <option value=\"usfemale\">\n                            US English FeMale Voice\n                          </option>\n                          <option value=\"ukmale\">UK English Male Voice</option>\n                          <option value=\"ukfemale\">\n                            UK English FeMale Voice\n                          </option>\n                        </select>\n                      </div>\n                    </label>\n                  </form>\n                </section>\n                <p className=\"Hangman-btns\">{gameStart}</p>\n              </div>\n            ) : (\n              <div className=\"wrapper\">\n                <div className=\"rubik-loader\"></div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}