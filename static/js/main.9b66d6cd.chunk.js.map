{"version":3,"sources":["Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["Shuffle","audioElement","arr","temp","index","ctr","length","Math","floor","random","App","props","handleKeyPress","event","i","isEnd","state","key","playAudio","currentTime","_startTime","duration","english_text","vietnames_text","final_text","guessWord","checkAnswer","createAnswer","storeIndex","countGuess","bool","english","vietnames","submit","value","voice","valueInput","inputArr","urlDownLoad","urlYouTuBe","captions","starts","durations","count","results","isPlayArr","prevKey","isLoaded","defaultsYoutubeUrl","handleGuessButtons","bind","handleGuessBox","handleOtherButton","handleChange","handleSubmit","showAnswers","handleSelectChange","script","document","createElement","src","async","body","appendChild","console","clear","this","setState","str","evt","ltr","target","window","responsiveVoice","speak","err","log","k","slice","replace","toLowerCase","newAnswer","splice","indexOf","copy","text","startTime","parseInt","pause","error","setAttribute","self","addEventListener","map","play","elements","className","onMouseEnter","element","onClick","type","name","placeholder","onChange","style","borderRadius","height","width","fontSize","ref","onKeyUp","autoPlay","controls","hidden","id","background","border","color","newCheckAnswer","s","trim","Audio","includes","preventDefault","split","fetchEstimations","a","payload","FormData","append","fetch","urlServer","method","res","json","estimation","shortUrl","url","axios","get","deck","string","data","RegExp","result","pop","textOfStartDuration","start","push","show","j","forEach","gameStart","generateButtons","onSubmit","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9b66d6cd.chunk.js","sourcesContent":["function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport axios from \"axios\";\nimport \"./App.css\";\n\nvar audioElement;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      english_text: \"\",\n      vietnames_text: \"\",\n      final_text: [],\n      guessWord: \"\",\n      checkAnswer: [],\n      createAnswer: [],\n      key: 0,\n      index: 0,\n      storeIndex: \"\",\n      countGuess: 0,\n      bool: false,\n      english: \"\",\n      vietnames: \"\",\n      submit: true,\n      value: \"default\",\n      voice: \"US English Male\",\n      valueInput: \"\",\n      inputArr: [],\n      urlDownLoad: \"\",\n      urlYouTuBe: \"\",\n      captions: [],\n      duration: \"\",\n      audioElement: \"\",\n      starts: [],\n      durations: [],\n      count: 0,\n      results: [],\n      isPlayArr: [],\n      prevKey: -1,\n      isEnd: false,\n      isLoaded: false,\n      defaultsYoutubeUrl: [\n        \"https://www.youtube.com/watch?v\",\n        \"https://youtu.be/\",\n        \"https://m.youtube.com/watch?feature=youtu.be&v=\",\n        \"https://www.youtube.com/watch?feature=youtu.be&v=\",\n      ],\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.showAnswers = this.showAnswers.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.playAudio = this.playAudio.bind(this);\n  }\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  handleGuessBox(key) {\n    // && this.state.guessWord.length > 0\n    // let copy = this.state.isPlayArr.map((bool) => true);\n    console.clear()\n    if (key !== this.state.key) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n        //   isPlayArr: copy,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, this.state.voice);\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr;\n    try {\n      ltr = evt.target.value;\n    } catch (err) {\n      ltr = evt;\n    }\n\n    console.log(ltr);\n    let {\n      key,\n      storeIndex,\n      countGuess,\n      checkAnswer,\n      bool,\n      createAnswer,\n    } = this.state;\n    const k = storeIndex[key];\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, this.state.voice);\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      checkAnswer[key][k].replace(\",\", \"\").toLowerCase() ===\n      ltr.replace(\",\", \"\").toLowerCase()\n    ) {\n      let newAnswer = createAnswer.slice(0, createAnswer.length);\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      final_text[key].splice(final_text[key].indexOf(checkAnswer[key][k]), 1);\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        //window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      newAnswer[key][k] = checkAnswer[key][k];\n      let copy = storeIndex.slice(0, storeIndex.length);\n      copy[key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: this.state.checkAnswer[key][k],\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n        valueInput: \"\",\n      }));\n      if (k + 1 === checkAnswer[key].length) {\n        \n        this.setState((str) => ({\n          index: 0,\n        }));\n      }\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = `The next word is ${checkAnswer[key][k]}`;\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, this.state.voice);\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n        this.setState((str) => ({\n          valueInput: \"\",\n        }));\n      }\n\n      this.setState((str) => ({\n        guessWord: checkAnswer[key][k],\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        this.state.voice\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n\n  playAudio(index) {\n    try {\n      let {\n        starts,\n        durations,\n        results,\n        isPlayArr,\n        prevKey,\n        isEnd,\n      } = this.state;\n      let startTime, duration;\n      if (index === results.length - 1) {\n        startTime = starts[index * 2];\n        if (results.length % 2 !== 0) {\n          duration = durations[index * 2] + durations[index * 2 + 1] + 1;\n        } else {\n          duration = durations[index * 2] + 1;\n        }\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      } else {\n        startTime = starts[index * 2];\n        duration = starts[index * 2 + 2] - starts[index * 2] - 0.15;\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      }\n\n      let copy = isPlayArr.slice(0, isPlayArr.length);\n      console.log(\"Text: \", results[index]);\n      if (index !== prevKey && prevKey !== -1) {\n        if (!copy[prevKey]) {\n          copy[prevKey] = !copy[prevKey];\n        }\n        audioElement.pause();\n      }\n      if (!isPlayArr[index]) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          console.log(\"Don't Worry\");\n        }\n      }\n      copy[index] = !copy[index];\n      if ((prevKey !== index && isPlayArr[index]) || isEnd === true) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          //\n        }\n\n        audioElement = document.createElement(\"video\");\n\n        audioElement.setAttribute(\"src\", this.state.urlDownLoad);\n        audioElement.value = duration;\n        audioElement._startTime = startTime;\n        audioElement.currentTime = startTime;\n      }\n      if (isEnd === true) isEnd = false;\n\n      const self = this;\n      audioElement.addEventListener(\"timeupdate\", function () {\n        //console.log(audioElement.currentTime);\n        if (\n          audioElement.currentTime - audioElement._startTime >=\n          audioElement.value\n        ) {\n          audioElement.pause();\n          isEnd = true;\n        }\n        if (isEnd) {\n          let copy = isPlayArr.map((i) => true);\n          self.setState({\n            isPlayArr: copy,\n            isEnd: isEnd,\n          });\n        }\n      });\n\n      if (isPlayArr[index]) {\n        audioElement.play();\n      }\n\n      this.setState({\n        isPlayArr: copy,\n        prevKey: index,\n        isEnd: isEnd,\n      });\n    } catch (error) {}\n  }\n  generateButtons() {\n    let { final_text, createAnswer } = this.state;\n\n    return final_text.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n\n          {this.state.final_text[i].length > 0 ? (\n            <div>\n              <input\n                type=\"text\"\n                name=\"valueInput\"\n                placeholder=\"Typing Answer\"\n                value={this.state.key === i ? this.state.valueInput : \"\"}\n                onChange={(evt) => this.handleChange(evt, i)}\n                style={{\n                  borderRadius: \"5px\",\n                  height: \"30px\",\n                  width: \"200px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n          ) : (\n            <p></p>\n          )}\n          {elements.map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleGuessButtons}\n            >\n              {element}\n            </button>\n          ))}\n          <div>\n            <button\n              className=\"Button\"\n              key={i}\n              onClick={() => this.playAudio(i)}\n              ref=\"play\"\n              onKeyUp={(evt) => this.handleKeyPress(evt, i)}\n            >\n              {this.state.isPlayArr[i] ? \"Play\" : \"Pause\"}\n            </button>\n            {/* <input\n              type=\"hidden\"\n              // onKeyPress={(evt) => this.handleKeyPress(evt, i)}\n              onKeyUp={(evt) => this.handleKeyPress(evt, i)}\n            /> */}\n          </div>\n\n          {this.state.final_text[i].length === 0 ? (\n            \n            <div>\n              <audio\n                src=\"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                autoPlay\n                controls\n                hidden\n              ></audio>\n              <h1 id=\"meo\">{this.state.results[i]}</h1>\n            </div>\n          ) : (\n            <div>\n              <button\n                className=\"Button\"\n                style={{\n                  background: \"#2c3e50\",\n                  border: \"none\",\n                  color: \"#e2e5e9\",\n                }}\n                key={i}\n                onClick={() => this.showAnswers(i)}\n              >\n                Show Answer\n              </button>\n            </div>\n          )}\n        </section>\n      );\n    });\n  }\n  handleKeyPress = (event, i) => {\n    let isEnd = this.state.isEnd;\n    if (event.key === \"Space\") {\n      this.playAudio(i);\n    } else if (event.key === \"ArrowLeft\" && !isEnd) {\n      audioElement.currentTime =\n        audioElement.currentTime - 3 > audioElement._startTime\n          ? audioElement.currentTime - 3\n          : audioElement._startTime;\n    } else if (event.key === \"ArrowRight\" && !isEnd) {\n      audioElement.currentTime =\n        audioElement.currentTime + 3 <\n        audioElement._startTime + audioElement.duration\n          ? (audioElement.currentTime += 3)\n          : audioElement.currentTime;\n    }\n  };\n\n\n  handleChange(evt, key) {\n    let index = this.state.index;\n    let checkAnswer = this.state.checkAnswer;\n    let inputArr = this.state.inputArr;\n    let copy = inputArr.slice(0, inputArr.length);\n    let final_text = this.state.final_text;\n\n    this.setState(\n      {\n        [evt.target.name]: evt.target.value,\n      },\n      function () {\n        if (checkAnswer.length > 0) {\n          let newCheckAnswer = final_text[key].map((s) =>\n            s.replace(\",\", \"\").toLowerCase()\n          );\n          if (this.state.valueInput === \"meowmeow\") {\n            window.responsiveVoice.speak(\"You say meowmeow\", this.state.voice);\n            if (this.state.final_text[key].length === 0) {\n              this.setState({\n                valueInput: \"\",\n                index: index + 1,\n              });\n            } else {\n              this.handleGuessButtons(checkAnswer[key][index]);\n              this.setState({\n                valueInput: \"\",\n              });\n            }\n          }\n          if (\n            this.state.valueInput.trim().toLowerCase() ===\n              checkAnswer[key][index].toLowerCase() &&\n            this.state.final_text[key].length === 0\n          ) {\n            window.responsiveVoice.speak(\n              this.state.valueInput,\n              this.state.voice\n            );\n            if (index === checkAnswer[key].length - 1) {\n              var audio = new Audio(\n                \"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n              );\n              audio.play();\n              console.log(\"Yes\");\n              copy[key] = false;\n            }\n\n            this.setState({\n              valueInput: \"\",\n              index: index + 1,\n              inputArr: copy,\n            });\n          } else if (\n            newCheckAnswer.includes(\n              this.state.valueInput.trim().toLowerCase()\n            ) &&\n            this.state.valueInput[this.state.valueInput.length - 1] === \" \"\n          ) {\n            this.handleGuessButtons(this.state.valueInput.trim().toLowerCase());\n          }\n        }\n      }\n    );\n  }\n  handleSelectChange(event) {\n    let value = event.target.value;\n    let voice = this.state.voice;\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n    switch (value) {\n      case \"showanswer\":\n        for (let i = 0; i < final_text.length; i++) {\n          final_text[i] = [];\n          createAnswer[i] = this.state.checkAnswer[i];\n        }\n        break;\n\n      case \"usmale\":\n        voice = \"US English Male\";\n        break;\n      case \"usfemale\":\n        voice = \"US English Female\";\n        break;\n      case \"ukmale\":\n        voice = \"UK English Male\";\n        break;\n      case \"ukfemale\":\n        voice = \"UK English Female\";\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      value: value,\n      final_text: final_text,\n      createAnswer: createAnswer,\n      voice: voice,\n    });\n  }\n\n  showAnswers(key) {\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n\n    final_text[key] = [];\n    createAnswer[key] = this.state.checkAnswer[key];\n    this.setState((str) => ({\n      final_text: final_text,\n      createAnswer: createAnswer,\n    }));\n  }\n  async handleSubmit(evt) {\n    evt.preventDefault();\n    let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n    //let urlDownLoad = this.state.urlDownLoad;\n    //if (urlYouTuBe.length > 0 && urlDownLoad.length > 0)\n    if (urlYouTuBe.length > 0 ) {\n      this.setState({ submit: false });\n      if (\n        this.state.captions.length === 0 &&\n        this.state.urlYouTuBe.length > 0\n      ) {\n        urlYouTuBe = this.state.urlYouTuBe;\n        let shortUrl = \"\";\n        for (let i = 0; i < this.state.defaultsYoutubeUrl.length; i++) {\n          if (!urlYouTuBe.indexOf(this.state.defaultsYoutubeUrl[i])) {\n            switch (i) {\n              case 0:\n                shortUrl = urlYouTuBe.split(\"=\")[1].split(\"&\")[0];\n                break;\n              case 1:\n                shortUrl = urlYouTuBe.split(\"/\")[3].slice(0, 11);\n                break;\n              case 2:\n                shortUrl = urlYouTuBe.split(\"=\")[2];\n                break;\n              case 3:\n                shortUrl = urlYouTuBe.split(\"&\")[1].split(\"=\")[1];\n                break;\n\n              default:\n                break;\n            }\n          }\n        }\n        const url = this.state.defaultsYoutubeUrl[0] + \"=\" + shortUrl\n\n        async function fetchEstimations(text) {\n          const payload = new FormData();\n          payload.append(\"text\", text);\n          const urlServer = 'https://flasklasttime.herokuapp.com/'\n          const res = await fetch(urlServer + \"calc\", {\n            method: \"post\",\n            body: payload,\n          });\n        \n          const estimation = await res.json();\n          console.log(estimation);\n          return estimation;\n        }\n        let urlDownLoad = await fetchEstimations(url)\n        console.log(shortUrl);\n        let captions = [];\n        let starts = [];\n        let durations = [];\n        let deck = await axios.get(\n          \"https://video.google.com/timedtext?&lang=en&v=\" + shortUrl\n        );\n        let string = deck.data\n          .replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n          .split(\"<transcript>\");\n        let result = string[1].split(\"</text>\");\n        result.pop();\n        for (let i = 0; i < result.length; i++) {\n          let arr = result[i].split(\">\");\n          let textOfStartDuration = arr[0].split(\" \");\n          let start = textOfStartDuration[1].split(\"=\")[1];\n          let duration = textOfStartDuration[2].split(\"=\")[1];\n\n          captions.push(\n            arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n          );\n          starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n          durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n        }\n        let length = captions.length;\n        let results = [];\n        if (length % 2 === 0) {\n          for (let i = 0; i < length; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n        } else {\n          for (let i = 0; i < length - 1; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n          results.push(captions[length - 1]);\n        }\n\n        let createAnswer = [];\n        let inputArr = [];\n        let storeIndex = [];\n        let show = [];\n        let checkAnswer = [];\n        let final_text = [];\n        let isPlayArr = [];\n        for (let i = 0; i < results.length; i++) {\n          let arr = [];\n          checkAnswer.push(results[i].split(\" \"));\n          final_text.push(results[i].split(\" \"));\n          inputArr.push(true);\n          storeIndex.push(0);\n          isPlayArr.push(true);\n          show.push(0);\n          for (let j = 0; j < results[i].split(\" \").length; j++) {\n            arr.push(\"___\");\n          }\n          createAnswer.push(arr);\n        }\n        final_text.forEach((element) => Shuffle(element));\n\n        this.setState({\n          captions: captions,\n          urlDownLoad: urlDownLoad,\n          starts: starts,\n          durations: durations,\n          results: results,\n          final_text: final_text,\n          createAnswer: createAnswer,\n          inputArr: inputArr,\n          storeIndex: storeIndex,\n          show: show,\n          checkAnswer: checkAnswer,\n          isPlayArr: isPlayArr,\n          isLoaded: true,\n          //submit: false,\n        });\n      }\n    }\n  }\n\n  render() {\n    let gameStart = this.generateButtons();\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    //console.clear();\n    return (\n      <div className=\"App\">\n        {this.state.submit ? (\n          <div id=\"form\">\n            {/* <iframe\n              width=\"420\"\n              height=\"315\"\n              src=\"https://www.youtube.com/embed/Ye1ACgqbF_4\"\n            ></iframe> */}\n            <form onSubmit={this.handleSubmit}>\n              {/* <label>\n                <input\n                  type=\"text\"\n                  name=\"urlDownLoad\"\n                  placeholder=\"LinkDownLoad\"\n                  value={this.state.urlDownLoad}\n                  onChange={this.handleChange}\n                />\n              </label> */}\n              <label>\n                <input\n                  type=\"text\"\n                  name=\"urlYouTuBe\"\n                  placeholder=\"LinkYouTuBe\"\n                  value={this.state.urlYouTuBe}\n                  onChange={this.handleChange}\n                />\n              </label>\n              <button id=\"submit\">Submit!</button>\n            </form>\n          </div>\n        ) : (\n          <div>\n            {this.state.isLoaded ? (\n              <div>\n                <section id=\"meo\">\n                  <form onSubmit={this.showAnswers}>\n                    <label>\n                      <div className=\"select\">\n                        <select\n                          name=\"slct\"\n                          id=\"slct\"\n                          value={this.state.value}\n                          onChange={this.handleSelectChange}\n                        >\n                          <option value=\"default\">Choose an option</option>\n                          <option value=\"showanswer\">Show Answers</option>\n                          <option value=\"usmale\">US English Male Voice</option>\n                          <option value=\"usfemale\">\n                            US English FeMale Voice\n                          </option>\n                          <option value=\"ukmale\">UK English Male Voice</option>\n                          <option value=\"ukfemale\">\n                            UK English FeMale Voice\n                          </option>\n                        </select>\n                      </div>\n                    </label>\n                  </form>\n                </section>\n                <p className=\"Hangman-btns\">{gameStart}</p>\n              </div>\n            ) : (\n              <div className=\"wrapper\">\n                <div className=\"rubik-loader\"></div>\n              </div>\n            )}\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}