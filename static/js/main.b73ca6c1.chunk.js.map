{"version":3,"sources":["Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["Shuffle","audioElement","App","props","state","english_text","vietnames_text","final_text","guessWord","checkAnswer","createAnswer","key","index","storeIndex","countGuess","bool","english","vietnames","submit","value","voice","valueInput","inputArr","urlDownLoad","urlYouTuBe","captions","duration","starts","durations","count","results","isPlayArr","prevKey","isEnd","handleGuessButtons","bind","handleGuessBox","handleOtherButton","handleChange","handleSubmit","showAnswers","handleSelectChange","playAudio","script","document","createElement","src","async","body","appendChild","prevProps","prevState","this","length","split","Promise","resolve","xhr","XMLHttpRequest","url","slice","open","onreadystatechange","readyState","DONE","status","console","log","onload","e","responseText","onerror","undefined","error","send","then","val","result","replace","RegExp","pop","i","arr","textOfStartDuration","start","push","show","j","setState","str","evt","ltr","target","window","responsiveVoice","speak","err","k","toLowerCase","newAnswer","splice","indexOf","copy","text","startTime","parseInt","pause","setAttribute","_startTime","currentTime","self","addEventListener","map","play","elements","className","onMouseEnter","element","onClick","type","name","placeholder","onChange","style","borderRadius","height","width","fontSize","autoPlay","controls","hidden","id","background","border","color","newCheckAnswer","s","Audio","includes","event","preventDefault","gameStart","generateButtons","onSubmit","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b73ca6c1.chunk.js","sourcesContent":["function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport HandleText from \"./HandleText\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport \"./App.css\";\n\nvar audioElement;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      english_text: \"\",\n      vietnames_text: \"\",\n      final_text: [],\n      guessWord: \"\",\n      checkAnswer: [],\n      createAnswer: [],\n      key: 0,\n      index: 0,\n      storeIndex: \"\",\n      countGuess: 0,\n      bool: false,\n      english: \"\",\n      vietnames: \"\",\n      submit: true,\n      value: \"default\",\n      voice: \"US English Male\",\n      valueInput: \"\",\n      inputArr: [],\n      urlDownLoad: \"\",\n      urlYouTuBe: \"\",\n      captions: [],\n      duration: \"\",\n      audioElement: \"\",\n      starts: [],\n      durations: [],\n      count: 0,\n      results: [],\n      isPlayArr: [],\n      prevKey: -1,\n      isEnd: false,\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.showAnswers = this.showAnswers.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.playAudio = this.playAudio.bind(this);\n  }\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.urlYouTuBe !== this.state.urlYouTuBe) {\n      if (\n        this.state.captions.length === 0 &&\n        this.state.urlYouTuBe.length > 0\n      ) {\n        let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n\n        let captions = [];\n        let starts = [];\n        let durations = [];\n        let response = new Promise((resolve) => {\n          const xhr = new XMLHttpRequest(),\n            method = \"GET\",\n            url =\n              \"https://video.google.com/timedtext?&lang=en&v=\" +\n              urlYouTuBe[3].slice(0, 11);\n\n          xhr.open(method, url, true);\n          xhr.onreadystatechange = function () {\n            // In local files, status is 0 upon success in Mozilla Firefox\n            if (xhr.readyState === XMLHttpRequest.DONE) {\n              var status = xhr.status;\n              if (status === 0 || (status >= 200 && status < 400)) {\n                // The request has been completed successfully\n                console.log(\"OK\");\n              } else {\n                // Oh no! There has been an error with the request!\n              }\n            }\n          };\n\n          xhr.onload = function (e) {\n            resolve(xhr.responseText);\n          };\n          xhr.onerror = function () {\n            resolve(undefined);\n            console.error(\"** An error occurred during the XMLHttpRequest\");\n          };\n          xhr.send(null);\n        });\n        response.then((val) => {\n          let string = val\n            .replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n            .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n            .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n            .split(\"<transcript>\");\n          let result = string[1].split(\"</text>\");\n          result.pop();\n          for (let i = 0; i < result.length; i++) {\n            let arr = result[i].split(\">\");\n            let textOfStartDuration = arr[0].split(\" \");\n            let start = textOfStartDuration[1].split(\"=\")[1];\n            let duration = textOfStartDuration[2].split(\"=\")[1];\n\n            captions.push(\n              arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n            );\n            starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n            durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n          }\n          let length = captions.length;\n          let results = [];\n          if (length % 2 === 0) {\n            for (let i = 0; i < length; i += 2) {\n              results.push(captions[i] + \" \" + captions[i + 1]);\n            }\n          } else {\n            for (let i = 0; i < length - 1; i += 2) {\n              results.push(captions[i] + \" \" + captions[i + 1]);\n            }\n            results.push(captions[length - 1]);\n          }\n          let createAnswer = [];\n          let inputArr = [];\n          let storeIndex = [];\n          let show = [];\n          let checkAnswer = [];\n          let final_text = [];\n          let isPlayArr = [];\n          for (let i = 0; i < results.length; i++) {\n            let arr = [];\n            checkAnswer.push(results[i].split(\" \"));\n            final_text.push(results[i].split(\" \"));\n            inputArr.push(true);\n            storeIndex.push(0);\n            isPlayArr.push(true);\n            show.push(0);\n            for (let j = 0; j < results[i].split(\" \").length; j++) {\n              arr.push(\"___\");\n            }\n            createAnswer.push(arr);\n          }\n\n          this.setState({\n            captions: captions,\n            starts: starts,\n            durations: durations,\n            results: results,\n            final_text: final_text,\n            createAnswer: createAnswer,\n            inputArr: inputArr,\n            storeIndex: storeIndex,\n            show: show,\n            checkAnswer: checkAnswer,\n            isPlayArr: isPlayArr,\n          });\n        });\n      }\n    }\n  }\n\n  handleGuessBox(key) {\n    // && this.state.guessWord.length > 0\n    // let copy = this.state.isPlayArr.map((bool) => true);\n    if (key !== this.state.key) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n        //   isPlayArr: copy,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, this.state.voice);\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr;\n    try {\n      ltr = evt.target.value;\n    } catch (err) {\n      ltr = evt;\n    }\n\n    console.log(ltr);\n    const key = this.state.key;\n    const storeIndex = this.state.storeIndex;\n    const k = storeIndex[key];\n    let countGuess = this.state.countGuess;\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, this.state.voice);\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      this.state.checkAnswer[key][k].replace(\",\", \"\").toLowerCase() ===\n      ltr.replace(\",\", \"\").toLowerCase()\n    ) {\n      let newAnswer = this.state.createAnswer.slice(\n        0,\n        this.state.createAnswer.length\n      );\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        // window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      final_text[key].splice(\n        final_text[key].indexOf(this.state.checkAnswer[key][k]),\n        1\n      );\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && this.state.bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        //window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      newAnswer[key][k] = this.state.checkAnswer[key][k];\n      let copy = storeIndex.slice(0, storeIndex.length);\n      copy[key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: this.state.checkAnswer[key][k],\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n        valueInput: \"\",\n      }));\n      if (k + 1 === this.state.checkAnswer[key].length) {\n        this.setState((str) => ({\n          index: 0,\n        }));\n      }\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = `The next word is ${this.state.checkAnswer[key][k]}`;\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, this.state.voice);\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n        this.setState((str) => ({\n          valueInput: \"\",\n        }));\n      }\n      this.setState((str) => ({\n        guessWord: this.state.checkAnswer[key][k],\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        this.state.voice\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n\n  playAudio(index) {\n    try {\n      let {\n        starts,\n        durations,\n        results,\n        isPlayArr,\n        prevKey,\n        isEnd,\n      } = this.state;\n      let startTime, duration;\n      if (index === results.length - 1) {\n        startTime = starts[index * 2];\n        if (results.length % 2 !== 0) {\n          duration = durations[index * 2] + durations[index * 2 + 1] + 1;\n        } else {\n          duration = durations[index * 2] + 1;\n        }\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      } else {\n        startTime = starts[index * 2];\n        duration = starts[index * 2 + 2] - starts[index * 2] - 0.15;\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      }\n      let copy = isPlayArr.slice(0, isPlayArr.length);\n      console.log(\"Text: \", results[index]);\n      if (index !== prevKey && prevKey !== -1) {\n        if (!copy[prevKey]) {\n          copy[prevKey] = !copy[prevKey];\n        }\n        audioElement.pause();\n      }\n      if (!isPlayArr[index]) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          console.log(\"Don't Worry\");\n        }\n      }\n      copy[index] = !copy[index];\n      if ((prevKey !== index && isPlayArr[index]) || isEnd === true) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          //\n        }\n\n        audioElement = document.createElement(\"video\");\n\n        audioElement.setAttribute(\"src\", this.state.urlDownLoad);\n        audioElement.value = duration;\n        audioElement._startTime = startTime;\n        audioElement.currentTime = startTime;\n      }\n      if (isEnd === true) isEnd = false;\n\n      const self = this;\n      audioElement.addEventListener(\"timeupdate\", function () {\n        //console.log(audioElement.currentTime);\n        if (\n          audioElement.currentTime - audioElement._startTime >=\n          audioElement.value\n        ) {\n          audioElement.pause();\n          isEnd = true;\n        }\n        if (isEnd) {\n          let copy = isPlayArr.map((i) => true);\n          self.setState({\n            isPlayArr: copy,\n            isEnd: isEnd,\n          });\n        }\n      });\n\n      if (isPlayArr[index]) {\n        audioElement.play();\n      }\n\n      this.setState({\n        isPlayArr: copy,\n        prevKey: index,\n        isEnd: isEnd,\n      });\n    } catch (error) {}\n  }\n  generateButtons() {\n    let { results } = this.state;\n\n    return results.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {this.state.createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n          {this.state.final_text[i].length > 0 ? (\n            <div>\n              <input\n                type=\"text\"\n                name=\"valueInput\"\n                placeholder=\"Typing Answer\"\n                value={this.state.key === i ? this.state.valueInput : \"\"}\n                onChange={(evt) => this.handleChange(evt, i)}\n                style={{\n                  borderRadius: \"5px\",\n                  height: \"30px\",\n                  width: \"200px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n          ) : (\n            <p></p>\n          )}\n\n          <button className=\"Button\" key={i} onClick={() => this.playAudio(i)}>\n            {this.state.isPlayArr[i] ? \"Play\" : \"Pause\"}\n          </button>\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              <audio\n                src=\"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                autoPlay\n                controls\n                hidden\n              ></audio>\n              <h1 id=\"meo\">{this.state.results[i]}</h1>\n            </div>\n          ) : (\n            <div>\n              <button\n                className=\"Button\"\n                style={{\n                  background: \"#2c3e50\",\n                  border: \"none\",\n                  color: \"#e2e5e9\",\n                }}\n                key={i}\n                onClick={() => this.showAnswers(i)}\n              >\n                Show Answer\n              </button>\n            </div>\n          )}\n        </section>\n      );\n    });\n  }\n\n  //handleUpdate() {}\n\n  handleChange(evt, key) {\n    let index = this.state.index;\n    let checkAnswer = this.state.checkAnswer;\n    let inputArr = this.state.inputArr;\n    let copy = inputArr.slice(0, inputArr.length);\n    let final_text = this.state.final_text;\n    this.setState(\n      {\n        [evt.target.name]: evt.target.value,\n      },\n      function () {\n        try {\n          if (checkAnswer.length > 0) {\n            let newCheckAnswer = final_text[key].map((s) =>\n              s.replace(\",\", \"\").toLowerCase()\n            );\n            if (this.state.valueInput === \"meowmeow\") {\n              window.responsiveVoice.speak(\n                \"You say meowmeow\",\n                this.state.voice\n              );\n              if (this.state.final_text[key].length === 0) {\n                this.setState({\n                  valueInput: \"\",\n                  index: index + 1,\n                });\n              } else {\n                this.handleGuessButtons(checkAnswer[key][index]);\n                this.setState({\n                  valueInput: \"\",\n                });\n              }\n            }\n            if (\n              this.state.valueInput.toLowerCase() ===\n                checkAnswer[key][index].toLowerCase() &&\n              this.state.final_text[key].length === 0\n            ) {\n              window.responsiveVoice.speak(\n                this.state.valueInput,\n                this.state.voice\n              );\n              if (index === checkAnswer[key].length - 1) {\n                var audio = new Audio(\n                  \"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                );\n                audio.play();\n                console.log(\"Yes\");\n                copy[key] = false;\n              }\n\n              this.setState({\n                valueInput: \"\",\n                index: index + 1,\n                inputArr: copy,\n              });\n            } else if (\n              newCheckAnswer.includes(this.state.valueInput.toLowerCase())\n            ) {\n              this.handleGuessButtons(this.state.valueInput.toLowerCase());\n            }\n          }\n        } catch (error) {\n          console.log(\"Some Wrrong!\");\n        }\n      }\n    );\n  }\n  handleSelectChange(event) {\n    let value = event.target.value;\n    let voice = this.state.voice;\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n    switch (value) {\n      case \"showanswer\":\n        for (let i = 0; i < final_text.length; i++) {\n          final_text[i] = [];\n          createAnswer[i] = this.state.checkAnswer[i];\n        }\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      value: value,\n      final_text: final_text,\n      createAnswer: createAnswer,\n      voice: voice,\n    });\n  }\n\n  showAnswers(key) {\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n\n    final_text[key] = [];\n    createAnswer[key] = this.state.checkAnswer[key];\n    this.setState((str) => ({\n      final_text: final_text,\n      createAnswer: createAnswer,\n    }));\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n    let urlDownLoad = this.state.urlDownLoad;\n\n    if (urlYouTuBe.length > 0 && urlDownLoad.length > 0) {\n      this.setState({\n        submit: false,\n      });\n    }\n  }\n\n  render() {\n    let gameStart = this.generateButtons();\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    //console.clear();\n    return (\n      <div className=\"App\">\n        {this.state.submit ? (\n          <form onSubmit={this.handleSubmit} id=\"form\">\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlDownLoad\"\n                placeholder=\"LinkDownLoad\"\n                value={this.state.urlDownLoad}\n                onChange={this.handleChange}\n              />\n            </label>\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlYouTuBe\"\n                placeholder=\"LinkYouTuBe\"\n                value={this.state.urlYouTuBe}\n                onChange={this.handleChange}\n              />\n            </label>\n            <button id=\"submit\">Submit!</button>\n          </form>\n        ) : (\n          <div>\n            {/* <button onClick={this.showAnswers} className=\"Button\">\n              Show answer\n            </button> */}\n            <section id=\"meo\">\n              <form onSubmit={this.showAnswers}>\n                <label>\n                  <div className=\"select\">\n                    <select\n                      name=\"slct\"\n                      id=\"slct\"\n                      value={this.state.value}\n                      onChange={this.handleSelectChange}\n                    >\n                      <option value=\"default\">Choose an option</option>\n                      <option value=\"showanswer\">Show Answers</option>\n                      <option value=\"usmale\">US English Male Voice</option>\n                      <option value=\"usfemale\">US English FeMale Voice</option>\n                      <option value=\"ukmale\">UK English Male Voice</option>\n                      <option value=\"ukfemale\">UK English FeMale Voice</option>\n                    </select>\n                  </div>\n                </label>\n              </form>\n            </section>\n            <p className=\"Hangman-btns\">{gameStart}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}