{"version":3,"sources":["Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["Shuffle","audioElement","arr","temp","index","ctr","length","Math","floor","random","App","props","handleKeyPress","event","i","key","playAudio","state","english_text","vietnames_text","final_text","guessWord","checkAnswer","createAnswer","storeIndex","countGuess","bool","english","vietnames","submit","value","voice","valueInput","inputArr","urlDownLoad","urlYouTuBe","captions","duration","starts","durations","count","results","isPlayArr","prevKey","isEnd","handleGuessButtons","bind","handleGuessBox","handleOtherButton","handleChange","handleSubmit","showAnswers","handleSelectChange","showButtons","script","document","createElement","src","async","body","appendChild","this","split","Promise","resolve","xhr","XMLHttpRequest","url","slice","open","onreadystatechange","readyState","DONE","status","console","log","onload","e","responseText","onerror","undefined","error","send","then","val","result","replace","RegExp","pop","textOfStartDuration","start","push","show","j","forEach","element","setState","str","evt","ltr","target","window","responsiveVoice","speak","err","k","toLowerCase","newAnswer","splice","indexOf","copy","text","startTime","parseInt","pause","setAttribute","_startTime","currentTime","self","addEventListener","map","play","elements","className","onMouseEnter","onClick","type","name","placeholder","onChange","style","borderRadius","height","width","fontSize","ref","onKeyPress","autoPlay","controls","hidden","id","background","border","color","newCheckAnswer","s","Audio","includes","preventDefault","gameStart","generateButtons","clear","onSubmit","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a7bbd94c.chunk.js","sourcesContent":["function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport \"./App.css\";\n\nvar audioElement;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      english_text: \"\",\n      vietnames_text: \"\",\n      final_text: [],\n      guessWord: \"\",\n      checkAnswer: [],\n      createAnswer: [],\n      key: 0,\n      index: 0,\n      storeIndex: \"\",\n      countGuess: 0,\n      bool: false,\n      english: \"\",\n      vietnames: \"\",\n      submit: true,\n      value: \"default\",\n      voice: \"US English Male\",\n      valueInput: \"\",\n      inputArr: [],\n      urlDownLoad: \"\",\n      urlYouTuBe: \"\",\n      captions: [],\n      duration: \"\",\n      audioElement: \"\",\n      starts: [],\n      durations: [],\n      count: 0,\n      results: [],\n      isPlayArr: [],\n      prevKey: -1,\n      isEnd: false,\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.showAnswers = this.showAnswers.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.playAudio = this.playAudio.bind(this);\n    this.showButtons = this.showButtons.bind(this);\n  }\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.urlYouTuBe !== this.state.urlYouTuBe) {\n  //     if (\n  //       this.state.captions.length === 0 &&\n  //       this.state.urlYouTuBe.length > 0\n  //     ) {\n  //       let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n\n  //       let captions = [];\n  //       let starts = [];\n  //       let durations = [];\n  //       let response = new Promise((resolve) => {\n  //         const xhr = new XMLHttpRequest(),\n  //           method = \"GET\",\n  //           url =\n  //             \"https://video.google.com/timedtext?&lang=en&v=\" +\n  //             urlYouTuBe[3].slice(0, 11);\n\n  //         xhr.open(method, url, true);\n  //         xhr.onreadystatechange = function () {\n  //           // In local files, status is 0 upon success in Mozilla Firefox\n  //           if (xhr.readyState === XMLHttpRequest.DONE) {\n  //             var status = xhr.status;\n  //             if (status === 0 || (status >= 200 && status < 400)) {\n  //               // The request has been completed successfully\n  //               console.log(\"OK\");\n  //             } else {\n  //               // Oh no! There has been an error with the request!\n  //             }\n  //           }\n  //         };\n\n  //         xhr.onload = function (e) {\n  //           resolve(xhr.responseText);\n  //         };\n  //         xhr.onerror = function () {\n  //           resolve(undefined);\n  //           console.error(\"** An error occurred during the XMLHttpRequest\");\n  //         };\n  //         xhr.send(null);\n  //       });\n  //       response.then((val) => {\n  //         let string = val\n  //           .replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n  //           .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n  //           .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n  //           .split(\"<transcript>\");\n  //         let result = string[1].split(\"</text>\");\n  //         result.pop();\n  //         for (let i = 0; i < result.length; i++) {\n  //           let arr = result[i].split(\">\");\n  //           let textOfStartDuration = arr[0].split(\" \");\n  //           let start = textOfStartDuration[1].split(\"=\")[1];\n  //           let duration = textOfStartDuration[2].split(\"=\")[1];\n\n  //           captions.push(\n  //             arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n  //           );\n  //           starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n  //           durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n  //         }\n  //         let length = captions.length;\n  //         let results = [];\n  //         if (length % 2 === 0) {\n  //           for (let i = 0; i < length; i += 2) {\n  //             results.push(captions[i] + \" \" + captions[i + 1]);\n  //           }\n  //         } else {\n  //           for (let i = 0; i < length - 1; i += 2) {\n  //             results.push(captions[i] + \" \" + captions[i + 1]);\n  //           }\n  //           results.push(captions[length - 1]);\n  //         }\n  //         let createAnswer = [];\n  //         let inputArr = [];\n  //         let storeIndex = [];\n  //         let show = [];\n  //         let checkAnswer = [];\n  //         let final_text = [];\n  //         let isPlayArr = [];\n  //         for (let i = 0; i < results.length; i++) {\n  //           let arr = [];\n  //           checkAnswer.push(results[i].split(\" \"));\n  //           final_text.push(results[i].split(\" \"));\n  //           inputArr.push(true);\n  //           storeIndex.push(0);\n  //           isPlayArr.push(true);\n  //           show.push(0);\n  //           for (let j = 0; j < results[i].split(\" \").length; j++) {\n  //             arr.push(\"___\");\n  //           }\n  //           createAnswer.push(arr);\n  //         }\n  //         final_text.forEach((element) => Shuffle(element));\n\n  //         this.setState({\n  //           captions: captions,\n  //           starts: starts,\n  //           durations: durations,\n  //           results: results,\n  //           final_text: final_text,\n  //           createAnswer: createAnswer,\n  //           inputArr: inputArr,\n  //           storeIndex: storeIndex,\n  //           show: show,\n  //           checkAnswer: checkAnswer,\n  //           isPlayArr: isPlayArr,\n  //         });\n  //       });\n  //     }\n  //   }\n  // }\n  showButtons() {\n    if (this.state.captions.length === 0 && this.state.urlYouTuBe.length > 0) {\n      let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n\n      let captions = [];\n      let starts = [];\n      let durations = [];\n      let response = new Promise((resolve) => {\n        const xhr = new XMLHttpRequest(),\n          method = \"GET\",\n          url =\n            \"https://video.google.com/timedtext?&lang=en&v=\" +\n            urlYouTuBe[3].slice(0, 11);\n\n        xhr.open(method, url, true);\n        xhr.onreadystatechange = function () {\n          // In local files, status is 0 upon success in Mozilla Firefox\n          if (xhr.readyState === XMLHttpRequest.DONE) {\n            var status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n              // The request has been completed successfully\n              console.log(\"OK\");\n            } else {\n              // Oh no! There has been an error with the request!\n            }\n          }\n        };\n\n        xhr.onload = function (e) {\n          resolve(xhr.responseText);\n        };\n        xhr.onerror = function () {\n          resolve(undefined);\n          console.error(\"** An error occurred during the XMLHttpRequest\");\n        };\n        xhr.send(null);\n      });\n      response.then((val) => {\n        let string = val\n          .replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n          .split(\"<transcript>\");\n        let result = string[1].split(\"</text>\");\n        result.pop();\n        for (let i = 0; i < result.length; i++) {\n          let arr = result[i].split(\">\");\n          let textOfStartDuration = arr[0].split(\" \");\n          let start = textOfStartDuration[1].split(\"=\")[1];\n          let duration = textOfStartDuration[2].split(\"=\")[1];\n\n          captions.push(\n            arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n          );\n          starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n          durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n        }\n        let length = captions.length;\n        let results = [];\n        if (length % 2 === 0) {\n          for (let i = 0; i < length; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n        } else {\n          for (let i = 0; i < length - 1; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n          results.push(captions[length - 1]);\n        }\n        let createAnswer = [];\n        let inputArr = [];\n        let storeIndex = [];\n        let show = [];\n        let checkAnswer = [];\n        let final_text = [];\n        let isPlayArr = [];\n        for (let i = 0; i < results.length; i++) {\n          let arr = [];\n          checkAnswer.push(results[i].split(\" \"));\n          final_text.push(results[i].split(\" \"));\n          inputArr.push(true);\n          storeIndex.push(0);\n          isPlayArr.push(true);\n          show.push(0);\n          for (let j = 0; j < results[i].split(\" \").length; j++) {\n            arr.push(\"___\");\n          }\n          createAnswer.push(arr);\n        }\n        final_text.forEach((element) => Shuffle(element));\n\n        this.setState({\n          captions: captions,\n          starts: starts,\n          durations: durations,\n          results: results,\n          final_text: final_text,\n          createAnswer: createAnswer,\n          inputArr: inputArr,\n          storeIndex: storeIndex,\n          show: show,\n          checkAnswer: checkAnswer,\n          isPlayArr: isPlayArr,\n        });\n      });\n    }\n  }\n\n  handleGuessBox(key) {\n    // && this.state.guessWord.length > 0\n    // let copy = this.state.isPlayArr.map((bool) => true);\n    if (key !== this.state.key) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n        //   isPlayArr: copy,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, this.state.voice);\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr;\n    try {\n      ltr = evt.target.value;\n    } catch (err) {\n      ltr = evt;\n    }\n\n    console.log(ltr);\n    const key = this.state.key;\n    const storeIndex = this.state.storeIndex;\n    const k = storeIndex[key];\n    let countGuess = this.state.countGuess;\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, this.state.voice);\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      this.state.checkAnswer[key][k].replace(\",\", \"\").toLowerCase() ===\n      ltr.replace(\",\", \"\").toLowerCase()\n    ) {\n      let newAnswer = this.state.createAnswer.slice(\n        0,\n        this.state.createAnswer.length\n      );\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        // window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      final_text[key].splice(\n        final_text[key].indexOf(this.state.checkAnswer[key][k]),\n        1\n      );\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && this.state.bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        //window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      newAnswer[key][k] = this.state.checkAnswer[key][k];\n      let copy = storeIndex.slice(0, storeIndex.length);\n      copy[key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: this.state.checkAnswer[key][k],\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n        valueInput: \"\",\n      }));\n      if (k + 1 === this.state.checkAnswer[key].length) {\n        this.setState((str) => ({\n          index: 0,\n        }));\n      }\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = `The next word is ${this.state.checkAnswer[key][k]}`;\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, this.state.voice);\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n        this.setState((str) => ({\n          valueInput: \"\",\n        }));\n      }\n\n      this.setState((str) => ({\n        guessWord: this.state.checkAnswer[key][k],\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        this.state.voice\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n\n  playAudio(index) {\n    try {\n      let {\n        starts,\n        durations,\n        results,\n        isPlayArr,\n        prevKey,\n        isEnd,\n      } = this.state;\n      let startTime, duration;\n      if (index === results.length - 1) {\n        startTime = starts[index * 2];\n        if (results.length % 2 !== 0) {\n          duration = durations[index * 2] + durations[index * 2 + 1] + 1;\n        } else {\n          duration = durations[index * 2] + 1;\n        }\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      } else {\n        startTime = starts[index * 2];\n        duration = starts[index * 2 + 2] - starts[index * 2] - 0.15;\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      }\n      let copy = isPlayArr.slice(0, isPlayArr.length);\n      console.log(\"Text: \", results[index]);\n      if (index !== prevKey && prevKey !== -1) {\n        if (!copy[prevKey]) {\n          copy[prevKey] = !copy[prevKey];\n        }\n        audioElement.pause();\n      }\n      if (!isPlayArr[index]) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          console.log(\"Don't Worry\");\n        }\n      }\n      copy[index] = !copy[index];\n      if ((prevKey !== index && isPlayArr[index]) || isEnd === true) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          //\n        }\n\n        audioElement = document.createElement(\"video\");\n\n        audioElement.setAttribute(\"src\", this.state.urlDownLoad);\n        audioElement.value = duration;\n        audioElement._startTime = startTime;\n        audioElement.currentTime = startTime;\n      }\n      if (isEnd === true) isEnd = false;\n\n      const self = this;\n      audioElement.addEventListener(\"timeupdate\", function () {\n        //console.log(audioElement.currentTime);\n        if (\n          audioElement.currentTime - audioElement._startTime >=\n          audioElement.value\n        ) {\n          audioElement.pause();\n          isEnd = true;\n        }\n        if (isEnd) {\n          let copy = isPlayArr.map((i) => true);\n          self.setState({\n            isPlayArr: copy,\n            isEnd: isEnd,\n          });\n        }\n      });\n\n      if (isPlayArr[index]) {\n        audioElement.play();\n      }\n\n      this.setState({\n        isPlayArr: copy,\n        prevKey: index,\n        isEnd: isEnd,\n      });\n    } catch (error) {}\n  }\n  generateButtons() {\n    let { final_text } = this.state;\n\n    return final_text.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {this.state.createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n          {this.state.final_text[i].length > 0 ? (\n            <div>\n              <input\n                type=\"text\"\n                name=\"valueInput\"\n                placeholder=\"Typing Answer\"\n                value={this.state.key === i ? this.state.valueInput : \"\"}\n                onChange={(evt) => this.handleChange(evt, i)}\n                style={{\n                  borderRadius: \"5px\",\n                  height: \"30px\",\n                  width: \"200px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n          ) : (\n            <p></p>\n          )}\n          {elements.map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleGuessButtons}\n            >\n              {element}\n            </button>\n          ))}\n          <div>\n            <button\n              className=\"Button\"\n              key={i}\n              onClick={() => this.playAudio(i)}\n              ref=\"play\"\n            >\n              {this.state.isPlayArr[i] ? \"Play\" : \"Pause\"}\n            </button>\n            <input\n              type=\"hidden\"\n              onKeyPress={(evt) => this.handleKeyPress(evt, i)}\n            />\n          </div>\n\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              <audio\n                src=\"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                autoPlay\n                controls\n                hidden\n              ></audio>\n              <h1 id=\"meo\">{this.state.results[i]}</h1>\n            </div>\n          ) : (\n            <div>\n              <button\n                className=\"Button\"\n                style={{\n                  background: \"#2c3e50\",\n                  border: \"none\",\n                  color: \"#e2e5e9\",\n                }}\n                key={i}\n                onClick={() => this.showAnswers(i)}\n              >\n                Show Answer\n              </button>\n            </div>\n          )}\n        </section>\n      );\n    });\n  }\n  handleKeyPress = (event, i) => {\n    if (event.key === \"Space\") {\n      this.playAudio(i);\n    }\n  };\n\n  handleChange(evt, key) {\n    let index = this.state.index;\n    let checkAnswer = this.state.checkAnswer;\n    let inputArr = this.state.inputArr;\n    let copy = inputArr.slice(0, inputArr.length);\n    let final_text = this.state.final_text;\n    this.setState(\n      {\n        [evt.target.name]: evt.target.value,\n      },\n      function () {\n        try {\n          if (checkAnswer.length > 0) {\n            let newCheckAnswer = final_text[key].map((s) =>\n              s.replace(\",\", \"\").toLowerCase()\n            );\n            if (this.state.valueInput === \"meowmeow\") {\n              window.responsiveVoice.speak(\n                \"You say meowmeow\",\n                this.state.voice\n              );\n              if (this.state.final_text[key].length === 0) {\n                this.setState({\n                  valueInput: \"\",\n                  index: index + 1,\n                });\n              } else {\n                this.handleGuessButtons(checkAnswer[key][index]);\n                this.setState({\n                  valueInput: \"\",\n                });\n              }\n            }\n            if (\n              this.state.valueInput.toLowerCase() ===\n                checkAnswer[key][index].toLowerCase() &&\n              this.state.final_text[key].length === 0 &&\n              this.state.valueInput[this.state.valueInput.length - 1] === \" \"\n            ) {\n              window.responsiveVoice.speak(\n                this.state.valueInput,\n                this.state.voice\n              );\n              if (index === checkAnswer[key].length - 1) {\n                var audio = new Audio(\n                  \"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                );\n                audio.play();\n                console.log(\"Yes\");\n                copy[key] = false;\n              }\n\n              this.setState({\n                valueInput: \"\",\n                index: index + 1,\n                inputArr: copy,\n              });\n            } else if (\n              newCheckAnswer.includes(this.state.valueInput.toLowerCase())\n            ) {\n              this.handleGuessButtons(this.state.valueInput.toLowerCase());\n            }\n          }\n        } catch (error) {\n          console.log(\"Some Wrrong!\");\n        }\n      }\n    );\n  }\n  handleSelectChange(event) {\n    let value = event.target.value;\n    let voice = this.state.voice;\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n    switch (value) {\n      case \"showanswer\":\n        for (let i = 0; i < final_text.length; i++) {\n          final_text[i] = [];\n          createAnswer[i] = this.state.checkAnswer[i];\n        }\n        break;\n      case \"showbutton\":\n        if (this.state.captions.length === 0) {\n          this.showButtons();\n        }\n        break;\n\n      case \"usmale\":\n        voice = \"US English Male\";\n        break;\n      case \"usfemale\":\n        voice = \"US English Female\";\n        break;\n      case \"ukmale\":\n        voice = \"UK English Male\";\n        break;\n      case \"ukfemale\":\n        voice = \"UK English Female\";\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      value: value,\n      final_text: final_text,\n      createAnswer: createAnswer,\n      voice: voice,\n    });\n  }\n\n  showAnswers(key) {\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n\n    final_text[key] = [];\n    createAnswer[key] = this.state.checkAnswer[key];\n    this.setState((str) => ({\n      final_text: final_text,\n      createAnswer: createAnswer,\n    }));\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n    let urlDownLoad = this.state.urlDownLoad;\n\n    if (urlYouTuBe.length > 0 && urlDownLoad.length > 0) {\n      this.setState({\n        submit: false,\n      });\n    }\n  }\n\n  render() {\n    let gameStart = this.generateButtons();\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    console.clear();\n    return (\n      <div className=\"App\">\n        {this.state.submit ? (\n          <form onSubmit={this.handleSubmit} id=\"form\">\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlDownLoad\"\n                placeholder=\"LinkDownLoad\"\n                value={this.state.urlDownLoad}\n                onChange={this.handleChange}\n              />\n            </label>\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlYouTuBe\"\n                placeholder=\"LinkYouTuBe\"\n                value={this.state.urlYouTuBe}\n                onChange={this.handleChange}\n              />\n            </label>\n            <button id=\"submit\">Submit!</button>\n          </form>\n        ) : (\n          <div>\n            {/* <button onClick={this.showAnswers} className=\"Button\">\n              Show answer\n            </button> */}\n            <section id=\"meo\">\n              <form onSubmit={this.showAnswers}>\n                <label>\n                  <div className=\"select\">\n                    <select\n                      name=\"slct\"\n                      id=\"slct\"\n                      value={this.state.value}\n                      onChange={this.handleSelectChange}\n                    >\n                      <option value=\"default\">Choose an option</option>\n                      <option value=\"showanswer\">Show Answers</option>\n                      <option value=\"showbutton\">Show Buttons</option>\n                      <option value=\"usmale\">US English Male Voice</option>\n                      <option value=\"usfemale\">US English FeMale Voice</option>\n                      <option value=\"ukmale\">UK English Male Voice</option>\n                      <option value=\"ukfemale\">UK English FeMale Voice</option>\n                    </select>\n                  </div>\n                </label>\n              </form>\n            </section>\n            <p className=\"Hangman-btns\">{gameStart}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}