{"version":3,"sources":["Shuffle.js","App.js","serviceWorker.js","index.js"],"names":["Shuffle","audioElement","arr","temp","index","ctr","length","Math","floor","random","App","props","state","english_text","vietnames_text","final_text","guessWord","checkAnswer","createAnswer","key","storeIndex","countGuess","bool","english","vietnames","submit","value","voice","valueInput","inputArr","urlDownLoad","urlYouTuBe","captions","duration","starts","durations","count","results","isPlayArr","prevKey","isEnd","handleGuessButtons","bind","handleGuessBox","handleOtherButton","handleChange","handleSubmit","showAnswers","handleSelectChange","playAudio","showButtons","script","document","createElement","src","async","body","appendChild","this","split","Promise","resolve","xhr","XMLHttpRequest","url","slice","open","onreadystatechange","readyState","DONE","status","console","log","onload","e","responseText","onerror","undefined","error","send","then","val","result","replace","RegExp","pop","i","textOfStartDuration","start","push","show","j","forEach","element","setState","str","evt","ltr","target","window","responsiveVoice","speak","err","k","toLowerCase","newAnswer","splice","indexOf","copy","text","startTime","parseInt","pause","setAttribute","_startTime","currentTime","self","addEventListener","map","play","elements","className","onMouseEnter","onClick","type","name","placeholder","onChange","style","borderRadius","height","width","fontSize","autoPlay","controls","hidden","id","background","border","color","newCheckAnswer","s","Audio","includes","event","preventDefault","gameStart","generateButtons","clear","onSubmit","Component","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.da74aaa2.chunk.js","sourcesContent":["function Shuffle(arr) {\r\n  let ctr = arr.length;\r\n  let temp;\r\n  let index;\r\n\r\n  // While there are elements in the array\r\n  while (ctr > 0) {\r\n    // Pick a random index\r\n    index = Math.floor(Math.random() * ctr);\r\n    // Decrease ctr by 1\r\n    ctr--;\r\n    // And swap the last element with it\r\n    temp = arr[ctr];\r\n    arr[ctr] = arr[index];\r\n    arr[index] = temp;\r\n  }\r\n  return arr;\r\n}\r\nexport default Shuffle;\r\n","import React, { Component } from \"react\";\nimport HandleText from \"./HandleText\";\nimport Shuffle from \"./Shuffle\";\nimport \"./Container.css\";\nimport \"./Button.css\";\nimport \"./App.css\";\n\nvar audioElement;\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      english_text: \"\",\n      vietnames_text: \"\",\n      final_text: [],\n      guessWord: \"\",\n      checkAnswer: [],\n      createAnswer: [],\n      key: 0,\n      index: 0,\n      storeIndex: \"\",\n      countGuess: 0,\n      bool: false,\n      english: \"\",\n      vietnames: \"\",\n      submit: true,\n      value: \"default\",\n      voice: \"US English Male\",\n      valueInput: \"\",\n      inputArr: [],\n      urlDownLoad: \"\",\n      urlYouTuBe: \"\",\n      captions: [],\n      duration: \"\",\n      audioElement: \"\",\n      starts: [],\n      durations: [],\n      count: 0,\n      results: [],\n      isPlayArr: [],\n      prevKey: -1,\n      isEnd: false,\n    };\n    this.handleGuessButtons = this.handleGuessButtons.bind(this);\n    this.handleGuessBox = this.handleGuessBox.bind(this);\n    this.handleOtherButton = this.handleOtherButton.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.showAnswers = this.showAnswers.bind(this);\n    this.handleSelectChange = this.handleSelectChange.bind(this);\n    this.playAudio = this.playAudio.bind(this);\n    this.showButtons = this.showButtons.bind(this);\n  }\n  componentDidMount() {\n    const script = document.createElement(\"script\");\n\n    script.src =\n      \"https://code.responsivevoice.org/responsivevoice.js?key=FdquDWj4\";\n    script.async = true;\n\n    document.body.appendChild(script);\n  }\n\n  // componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.urlYouTuBe !== this.state.urlYouTuBe) {\n  //     if (\n  //       this.state.captions.length === 0 &&\n  //       this.state.urlYouTuBe.length > 0\n  //     ) {\n  //       let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n\n  //       let captions = [];\n  //       let starts = [];\n  //       let durations = [];\n  //       let response = new Promise((resolve) => {\n  //         const xhr = new XMLHttpRequest(),\n  //           method = \"GET\",\n  //           url =\n  //             \"https://video.google.com/timedtext?&lang=en&v=\" +\n  //             urlYouTuBe[3].slice(0, 11);\n\n  //         xhr.open(method, url, true);\n  //         xhr.onreadystatechange = function () {\n  //           // In local files, status is 0 upon success in Mozilla Firefox\n  //           if (xhr.readyState === XMLHttpRequest.DONE) {\n  //             var status = xhr.status;\n  //             if (status === 0 || (status >= 200 && status < 400)) {\n  //               // The request has been completed successfully\n  //               console.log(\"OK\");\n  //             } else {\n  //               // Oh no! There has been an error with the request!\n  //             }\n  //           }\n  //         };\n\n  //         xhr.onload = function (e) {\n  //           resolve(xhr.responseText);\n  //         };\n  //         xhr.onerror = function () {\n  //           resolve(undefined);\n  //           console.error(\"** An error occurred during the XMLHttpRequest\");\n  //         };\n  //         xhr.send(null);\n  //       });\n  //       response.then((val) => {\n  //         let string = val\n  //           .replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n  //           .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n  //           .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n  //           .split(\"<transcript>\");\n  //         let result = string[1].split(\"</text>\");\n  //         result.pop();\n  //         for (let i = 0; i < result.length; i++) {\n  //           let arr = result[i].split(\">\");\n  //           let textOfStartDuration = arr[0].split(\" \");\n  //           let start = textOfStartDuration[1].split(\"=\")[1];\n  //           let duration = textOfStartDuration[2].split(\"=\")[1];\n\n  //           captions.push(\n  //             arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n  //           );\n  //           starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n  //           durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n  //         }\n  //         let length = captions.length;\n  //         let results = [];\n  //         if (length % 2 === 0) {\n  //           for (let i = 0; i < length; i += 2) {\n  //             results.push(captions[i] + \" \" + captions[i + 1]);\n  //           }\n  //         } else {\n  //           for (let i = 0; i < length - 1; i += 2) {\n  //             results.push(captions[i] + \" \" + captions[i + 1]);\n  //           }\n  //           results.push(captions[length - 1]);\n  //         }\n  //         let createAnswer = [];\n  //         let inputArr = [];\n  //         let storeIndex = [];\n  //         let show = [];\n  //         let checkAnswer = [];\n  //         let final_text = [];\n  //         let isPlayArr = [];\n  //         for (let i = 0; i < results.length; i++) {\n  //           let arr = [];\n  //           checkAnswer.push(results[i].split(\" \"));\n  //           final_text.push(results[i].split(\" \"));\n  //           inputArr.push(true);\n  //           storeIndex.push(0);\n  //           isPlayArr.push(true);\n  //           show.push(0);\n  //           for (let j = 0; j < results[i].split(\" \").length; j++) {\n  //             arr.push(\"___\");\n  //           }\n  //           createAnswer.push(arr);\n  //         }\n  //         final_text.forEach((element) => Shuffle(element));\n\n  //         this.setState({\n  //           captions: captions,\n  //           starts: starts,\n  //           durations: durations,\n  //           results: results,\n  //           final_text: final_text,\n  //           createAnswer: createAnswer,\n  //           inputArr: inputArr,\n  //           storeIndex: storeIndex,\n  //           show: show,\n  //           checkAnswer: checkAnswer,\n  //           isPlayArr: isPlayArr,\n  //         });\n  //       });\n  //     }\n  //   }\n  // }\n  showButtons() {\n    if (this.state.captions.length === 0 && this.state.urlYouTuBe.length > 0) {\n      let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n\n      let captions = [];\n      let starts = [];\n      let durations = [];\n      let response = new Promise((resolve) => {\n        const xhr = new XMLHttpRequest(),\n          method = \"GET\",\n          url =\n            \"https://video.google.com/timedtext?&lang=en&v=\" +\n            urlYouTuBe[3].slice(0, 11);\n\n        xhr.open(method, url, true);\n        xhr.onreadystatechange = function () {\n          // In local files, status is 0 upon success in Mozilla Firefox\n          if (xhr.readyState === XMLHttpRequest.DONE) {\n            var status = xhr.status;\n            if (status === 0 || (status >= 200 && status < 400)) {\n              // The request has been completed successfully\n              console.log(\"OK\");\n            } else {\n              // Oh no! There has been an error with the request!\n            }\n          }\n        };\n\n        xhr.onload = function (e) {\n          resolve(xhr.responseText);\n        };\n        xhr.onerror = function () {\n          resolve(undefined);\n          console.error(\"** An error occurred during the XMLHttpRequest\");\n        };\n        xhr.send(null);\n      });\n      response.then((val) => {\n        let string = val\n          .replace(new RegExp(\"&#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;#39;\", \"g\"), \"'\")\n          .replace(new RegExp(\"&amp;amp;\", \"g\"), \"and\")\n          .split(\"<transcript>\");\n        let result = string[1].split(\"</text>\");\n        result.pop();\n        for (let i = 0; i < result.length; i++) {\n          let arr = result[i].split(\">\");\n          let textOfStartDuration = arr[0].split(\" \");\n          let start = textOfStartDuration[1].split(\"=\")[1];\n          let duration = textOfStartDuration[2].split(\"=\")[1];\n\n          captions.push(\n            arr[1].replace(new RegExp('[&/\\\\#,+()$~%.\":*?<>{}]', \"g\"), \"\")\n          );\n          starts.push(+start.replace(new RegExp('\"', \"g\"), \"\"));\n          durations.push(+duration.replace(new RegExp('\"', \"g\"), \"\"));\n        }\n        let length = captions.length;\n        let results = [];\n        if (length % 2 === 0) {\n          for (let i = 0; i < length; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n        } else {\n          for (let i = 0; i < length - 1; i += 2) {\n            results.push(captions[i] + \" \" + captions[i + 1]);\n          }\n          results.push(captions[length - 1]);\n        }\n        let createAnswer = [];\n        let inputArr = [];\n        let storeIndex = [];\n        let show = [];\n        let checkAnswer = [];\n        let final_text = [];\n        let isPlayArr = [];\n        for (let i = 0; i < results.length; i++) {\n          let arr = [];\n          checkAnswer.push(results[i].split(\" \"));\n          final_text.push(results[i].split(\" \"));\n          inputArr.push(true);\n          storeIndex.push(0);\n          isPlayArr.push(true);\n          show.push(0);\n          for (let j = 0; j < results[i].split(\" \").length; j++) {\n            arr.push(\"___\");\n          }\n          createAnswer.push(arr);\n        }\n        final_text.forEach((element) => Shuffle(element));\n\n        this.setState({\n          captions: captions,\n          starts: starts,\n          durations: durations,\n          results: results,\n          final_text: final_text,\n          createAnswer: createAnswer,\n          inputArr: inputArr,\n          storeIndex: storeIndex,\n          show: show,\n          checkAnswer: checkAnswer,\n          isPlayArr: isPlayArr,\n        });\n      });\n    }\n  }\n\n  handleGuessBox(key) {\n    // && this.state.guessWord.length > 0\n    // let copy = this.state.isPlayArr.map((bool) => true);\n    if (key !== this.state.key) {\n      this.setState((str) => ({\n        //guessWord: \"\",\n        key: key,\n        index: 0,\n        countGuess: 0,\n        //   isPlayArr: copy,\n      }));\n    }\n  }\n  handleOtherButton(evt) {\n    let ltr = evt.target.value;\n    if (ltr !== \"___\") {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      //window.speechSynthesis.speak(msg);\n      window.responsiveVoice.speak(ltr, this.state.voice);\n    }\n  }\n  handleGuessButtons(evt) {\n    let ltr;\n    try {\n      ltr = evt.target.value;\n    } catch (err) {\n      ltr = evt;\n    }\n\n    console.log(ltr);\n    const key = this.state.key;\n    const storeIndex = this.state.storeIndex;\n    const k = storeIndex[key];\n    let countGuess = this.state.countGuess;\n    if (countGuess < 1) {\n      //var msg = new SpeechSynthesisUtterance(ltr);\n      // eslint-disable-next-line no-unused-expressions\n      window.responsiveVoice.speak(ltr, this.state.voice);\n      //window.speechSynthesis.speak(msg);\n      // eslint-disable-next-line no-unused-expressions\n    }\n\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    if (\n      this.state.checkAnswer[key][k].replace(\",\", \"\").toLowerCase() ===\n      ltr.replace(\",\", \"\").toLowerCase()\n    ) {\n      let newAnswer = this.state.createAnswer.slice(\n        0,\n        this.state.createAnswer.length\n      );\n      if (countGuess === 1) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        // window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      final_text[key].splice(\n        final_text[key].indexOf(this.state.checkAnswer[key][k]),\n        1\n      );\n      // final_text[this.state.key][final_text[this.state.key].indexOf(ltr)] =\n      //   \"__\";\n      if (countGuess !== 1 && this.state.bool) {\n        //msg = new SpeechSynthesisUtterance(ltr);\n        //window.speechSynthesis.speak(msg);\n        //window.responsiveVoice.speak(ltr, this.state.voice);\n      }\n      newAnswer[key][k] = this.state.checkAnswer[key][k];\n      let copy = storeIndex.slice(0, storeIndex.length);\n      copy[key] = k + 1;\n      this.setState((str) => ({\n        createAnswer: newAnswer,\n        index: k + 1,\n        guessWord: this.state.checkAnswer[key][k],\n        final_text: final_text,\n        storeIndex: copy,\n        countGuess: 0,\n        bool: false,\n        valueInput: \"\",\n      }));\n      if (k + 1 === this.state.checkAnswer[key].length) {\n        this.setState((str) => ({\n          index: 0,\n        }));\n      }\n    } else {\n      countGuess = countGuess + 1;\n      if (countGuess >= 2) {\n        //countGuess = 0;\n\n        let text = `The next word is ${this.state.checkAnswer[key][k]}`;\n\n        //window.speechSynthesis.speak(text);\n        window.responsiveVoice.speak(text, this.state.voice);\n        // alert(\n        //   \"Next Word : \" +\n        //     this.state.checkAnswer[this.state.key][\n        //       this.state.storeIndex[this.state.key]\n        //     ]\n        // );\n        this.setState((str) => ({\n          valueInput: \"\",\n        }));\n      }\n\n      this.setState((str) => ({\n        guessWord: this.state.checkAnswer[key][k],\n        countGuess: countGuess,\n        bool: true,\n      }));\n    }\n  }\n\n  handleReadText(key) {\n    if (this.state.final_text[key].length === 0) {\n      window.responsiveVoice.speak(\n        this.state.english_text[key],\n        this.state.voice\n      );\n      // let msg = new SpeechSynthesisUtterance(this.state.english_text[key]);\n      // msg.rate = 0.8;\n      // //window.speechSynthesis.speak(msg);\n    }\n  }\n\n  playAudio(index) {\n    try {\n      let {\n        starts,\n        durations,\n        results,\n        isPlayArr,\n        prevKey,\n        isEnd,\n      } = this.state;\n      let startTime, duration;\n      if (index === results.length - 1) {\n        startTime = starts[index * 2];\n        if (results.length % 2 !== 0) {\n          duration = durations[index * 2] + durations[index * 2 + 1] + 1;\n        } else {\n          duration = durations[index * 2] + 1;\n        }\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      } else {\n        startTime = starts[index * 2];\n        duration = starts[index * 2 + 2] - starts[index * 2] - 0.15;\n        console.log(\n          \"start\",\n          parseInt(startTime / 60) + (startTime % 60) / 100,\n          \"duration\",\n          duration\n        );\n      }\n      let copy = isPlayArr.slice(0, isPlayArr.length);\n      console.log(\"Text: \", results[index]);\n      if (index !== prevKey && prevKey !== -1) {\n        if (!copy[prevKey]) {\n          copy[prevKey] = !copy[prevKey];\n        }\n        audioElement.pause();\n      }\n      if (!isPlayArr[index]) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          console.log(\"Don't Worry\");\n        }\n      }\n      copy[index] = !copy[index];\n      if ((prevKey !== index && isPlayArr[index]) || isEnd === true) {\n        try {\n          audioElement.pause();\n        } catch (error) {\n          //\n        }\n\n        audioElement = document.createElement(\"video\");\n\n        audioElement.setAttribute(\"src\", this.state.urlDownLoad);\n        audioElement.value = duration;\n        audioElement._startTime = startTime;\n        audioElement.currentTime = startTime;\n      }\n      if (isEnd === true) isEnd = false;\n\n      const self = this;\n      audioElement.addEventListener(\"timeupdate\", function () {\n        //console.log(audioElement.currentTime);\n        if (\n          audioElement.currentTime - audioElement._startTime >=\n          audioElement.value\n        ) {\n          audioElement.pause();\n          isEnd = true;\n        }\n        if (isEnd) {\n          let copy = isPlayArr.map((i) => true);\n          self.setState({\n            isPlayArr: copy,\n            isEnd: isEnd,\n          });\n        }\n      });\n\n      if (isPlayArr[index]) {\n        audioElement.play();\n      }\n\n      this.setState({\n        isPlayArr: copy,\n        prevKey: index,\n        isEnd: isEnd,\n      });\n    } catch (error) {}\n  }\n  generateButtons() {\n    let { results, final_text } = this.state;\n\n    return final_text.map((elements, i) => {\n      return (\n        <section\n          className=\"Container\"\n          key={i}\n          value={i}\n          onMouseEnter={() => this.handleGuessBox(i)}\n        >\n          {this.state.createAnswer[i].map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleOtherButton}\n            >\n              {element}\n            </button>\n          ))}\n          {this.state.final_text[i].length > 0 ? (\n            <div>\n              <input\n                type=\"text\"\n                name=\"valueInput\"\n                placeholder=\"Typing Answer\"\n                value={this.state.key === i ? this.state.valueInput : \"\"}\n                onChange={(evt) => this.handleChange(evt, i)}\n                style={{\n                  borderRadius: \"5px\",\n                  height: \"30px\",\n                  width: \"200px\",\n                  fontSize: \"20px\",\n                }}\n              />\n            </div>\n          ) : (\n            <p></p>\n          )}\n          {elements.map((element, index) => (\n            <button\n              className=\"Button\"\n              key={index}\n              value={element}\n              onClick={this.handleGuessButtons}\n            >\n              {element}\n            </button>\n          ))}\n          <div>\n            <button\n              className=\"Button\"\n              key={i}\n              onClick={() => this.playAudio(i)}\n            >\n              {this.state.isPlayArr[i] ? \"Play\" : \"Pause\"}\n            </button>\n          </div>\n\n          {this.state.final_text[i].length === 0 ? (\n            <div>\n              <audio\n                src=\"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                autoPlay\n                controls\n                hidden\n              ></audio>\n              <h1 id=\"meo\">{this.state.results[i]}</h1>\n            </div>\n          ) : (\n            <div>\n              <button\n                className=\"Button\"\n                style={{\n                  background: \"#2c3e50\",\n                  border: \"none\",\n                  color: \"#e2e5e9\",\n                }}\n                key={i}\n                onClick={() => this.showAnswers(i)}\n              >\n                Show Answer\n              </button>\n            </div>\n          )}\n        </section>\n      );\n    });\n  }\n\n  //handleUpdate() {}\n\n  handleChange(evt, key) {\n    let index = this.state.index;\n    let checkAnswer = this.state.checkAnswer;\n    let inputArr = this.state.inputArr;\n    let copy = inputArr.slice(0, inputArr.length);\n    let final_text = this.state.final_text;\n    this.setState(\n      {\n        [evt.target.name]: evt.target.value,\n      },\n      function () {\n        try {\n          if (checkAnswer.length > 0) {\n            let newCheckAnswer = final_text[key].map((s) =>\n              s.replace(\",\", \"\").toLowerCase()\n            );\n            if (this.state.valueInput === \"meowmeow\") {\n              window.responsiveVoice.speak(\n                \"You say meowmeow\",\n                this.state.voice\n              );\n              if (this.state.final_text[key].length === 0) {\n                this.setState({\n                  valueInput: \"\",\n                  index: index + 1,\n                });\n              } else {\n                this.handleGuessButtons(checkAnswer[key][index]);\n                this.setState({\n                  valueInput: \"\",\n                });\n              }\n            }\n            if (\n              this.state.valueInput.toLowerCase() ===\n                checkAnswer[key][index].toLowerCase() &&\n              this.state.final_text[key].length === 0\n            ) {\n              window.responsiveVoice.speak(\n                this.state.valueInput,\n                this.state.voice\n              );\n              if (index === checkAnswer[key].length - 1) {\n                var audio = new Audio(\n                  \"https://media.vocaroo.com/mp3/9EciEJW3Cyt\"\n                );\n                audio.play();\n                console.log(\"Yes\");\n                copy[key] = false;\n              }\n\n              this.setState({\n                valueInput: \"\",\n                index: index + 1,\n                inputArr: copy,\n              });\n            } else if (\n              newCheckAnswer.includes(this.state.valueInput.toLowerCase())\n            ) {\n              this.handleGuessButtons(this.state.valueInput.toLowerCase());\n            }\n          }\n        } catch (error) {\n          console.log(\"Some Wrrong!\");\n        }\n      }\n    );\n  }\n  handleSelectChange(event) {\n    let value = event.target.value;\n    let voice = this.state.voice;\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n    switch (value) {\n      case \"showanswer\":\n        for (let i = 0; i < final_text.length; i++) {\n          final_text[i] = [];\n          createAnswer[i] = this.state.checkAnswer[i];\n        }\n        break;\n      case \"showbutton\":\n        if (this.state.captions.length === 0) {\n          this.showButtons();\n          break;\n        }\n\n      case \"usmale\":\n        voice = \"US English Male\";\n        break;\n      case \"usfemale\":\n        voice = \"US English Female\";\n        break;\n      case \"ukmale\":\n        voice = \"UK English Male\";\n        break;\n      case \"ukfemale\":\n        voice = \"UK English Female\";\n        break;\n      default:\n        break;\n    }\n    this.setState({\n      value: value,\n      final_text: final_text,\n      createAnswer: createAnswer,\n      voice: voice,\n    });\n  }\n\n  showAnswers(key) {\n    let final_text = this.state.final_text.slice(\n      0,\n      this.state.final_text.length\n    );\n    let createAnswer = this.state.createAnswer.slice(\n      0,\n      this.state.createAnswer.length\n    );\n\n    final_text[key] = [];\n    createAnswer[key] = this.state.checkAnswer[key];\n    this.setState((str) => ({\n      final_text: final_text,\n      createAnswer: createAnswer,\n    }));\n  }\n  handleSubmit(evt) {\n    evt.preventDefault();\n    let urlYouTuBe = this.state.urlYouTuBe.split(\"/\");\n    let urlDownLoad = this.state.urlDownLoad;\n\n    if (urlYouTuBe.length > 0 && urlDownLoad.length > 0) {\n      this.setState({\n        submit: false,\n      });\n    }\n  }\n\n  render() {\n    let gameStart = this.generateButtons();\n    if (this.state.guessWord === this.state.english_text[this.state.key]) {\n      console.log(\"Your answer is correct\");\n    }\n    console.clear();\n    return (\n      <div className=\"App\">\n        {this.state.submit ? (\n          <form onSubmit={this.handleSubmit} id=\"form\">\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlDownLoad\"\n                placeholder=\"LinkDownLoad\"\n                value={this.state.urlDownLoad}\n                onChange={this.handleChange}\n              />\n            </label>\n            <label>\n              <input\n                type=\"text\"\n                name=\"urlYouTuBe\"\n                placeholder=\"LinkYouTuBe\"\n                value={this.state.urlYouTuBe}\n                onChange={this.handleChange}\n              />\n            </label>\n            <button id=\"submit\">Submit!</button>\n          </form>\n        ) : (\n          <div>\n            {/* <button onClick={this.showAnswers} className=\"Button\">\n              Show answer\n            </button> */}\n            <section id=\"meo\">\n              <form onSubmit={this.showAnswers}>\n                <label>\n                  <div className=\"select\">\n                    <select\n                      name=\"slct\"\n                      id=\"slct\"\n                      value={this.state.value}\n                      onChange={this.handleSelectChange}\n                    >\n                      <option value=\"default\">Choose an option</option>\n                      <option value=\"showanswer\">Show Answers</option>\n                      <option value=\"showbutton\">Show Buttons</option>\n                      <option value=\"usmale\">US English Male Voice</option>\n                      <option value=\"usfemale\">US English FeMale Voice</option>\n                      <option value=\"ukmale\">UK English Male Voice</option>\n                      <option value=\"ukfemale\">UK English FeMale Voice</option>\n                    </select>\n                  </div>\n                </label>\n              </form>\n            </section>\n            <p className=\"Hangman-btns\">{gameStart}</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}